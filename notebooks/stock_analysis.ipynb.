{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1l7OjSMCkDNQLpo6ysTJUTVfSV2ziXFHc",
      "authorship_tag": "ABX9TyMjoNFTZUevzDx7GWkc7D92",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "20984286b00749609c69982dddf00ffc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_693b3e21a908494b83d1f85ba9f9a612",
              "IPY_MODEL_2cce0df18ec64c90b305ad55489a93ad"
            ],
            "layout": "IPY_MODEL_5e7d1d147655410fa8c4ab8b0c698505"
          }
        },
        "693b3e21a908494b83d1f85ba9f9a612": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Volatilidad",
              "Rendimiento",
              "Nivel de Precio"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Seleccionar An√°lisis:",
            "description_tooltip": null,
            "disabled": false,
            "index": 2,
            "layout": "IPY_MODEL_3cd83e27ab7448e2b7d4f82a2fd6cbc8",
            "style": "IPY_MODEL_86ecb1222c1748c7b0cc9b3d9802ce3e"
          }
        },
        "2cce0df18ec64c90b305ad55489a93ad": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_5f23c186e42a4b59804cb600bdbbed8c",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 1200x800 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "5e7d1d147655410fa8c4ab8b0c698505": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3cd83e27ab7448e2b7d4f82a2fd6cbc8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "86ecb1222c1748c7b0cc9b3d9802ce3e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5f23c186e42a4b59804cb600bdbbed8c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ShirsSosa/big-tech-stock-analysis/blob/main/notebooks/stock_analysis.ipynb.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yzmG9NNdla_b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2c208025-37c4-4e9c-94b2-a528625035ca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "xxUu0luMG_r5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "hXQ3TnTaHAR7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "f0YbS-GfCPV5"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Kje30-9fCQwq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "TZnIDRfnCRSh"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5MxTLZHsC9c9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "P3N5SVkhIyhf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "nx9syizBIzF4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "i7PAfc1CIz1Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Ho_MGxfkIz_s"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wYkXMe3GI3yn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "QQVSInwGI4F4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import auth\n",
        "auth.authenticate_user()\n",
        "\n",
        "import gspread\n",
        "from google.auth import default\n",
        "creds, _ = default()\n",
        "\n",
        "gc = gspread.authorize(creds)\n"
      ],
      "metadata": {
        "id": "bTdSL6hemjcE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# URL modificada de tu primer archivo\n",
        "url_1 = 'https://docs.google.com/spreadsheets/d/1ZmaGdUmK0xjpbZ1HhCLYn8m7w3yXnxgS7g7GhzwCTBs/edit?usp=sharing'\n",
        "\n",
        "# URL modificada de tu segundo archivo\n",
        "url_2 = 'https://docs.google.com/spreadsheets/d/1tjmzAfUtEc1ILXYeCaW-IzghSMzAJSHrt4YlagYGZec/edit?usp=sharing'\n",
        "\n",
        "\n",
        "# Carga cada archivo en un DataFrame separado\n",
        "df1 = pd.read_csv(url_1)\n",
        "df2 = pd.read_csv(url_2)\n",
        "\n",
        "# Muestra las primeras filas de cada uno para confirmar que cargaron bien\n",
        "print(\"Primer DataFrame:\")\n",
        "display(df1.head())\n",
        "\n",
        "print(\"\\nSegundo DataFrame:\")\n",
        "display(df2.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "YCiftfAqm8jO",
        "outputId": "75c4f241-4d81-4f90-cdf2-af70b271e0f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ParserError",
          "evalue": "Error tokenizing data. C error: Expected 631 fields in line 78, saw 6164\n",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mParserError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1156982003.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Carga cada archivo en un DataFrame separado\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mdf1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl_1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mdf2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl_2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Muestra las primeras filas de cada uno para confirmar que cargaron bien\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    624\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    625\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 626\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnrows\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    627\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    628\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, nrows)\u001b[0m\n\u001b[1;32m   1921\u001b[0m                     \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1922\u001b[0m                     \u001b[0mcol_dict\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1923\u001b[0;31m                 \u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m  \u001b[0;31m# type: ignore[attr-defined]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1924\u001b[0m                     \u001b[0mnrows\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1925\u001b[0m                 )\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, nrows)\u001b[0m\n\u001b[1;32m    232\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlow_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 234\u001b[0;31m                 \u001b[0mchunks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_low_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnrows\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    235\u001b[0m                 \u001b[0;31m# destructive to chunks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_concatenate_chunks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.read_low_memory\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._read_rows\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._tokenize_rows\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._check_tokenize_status\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.raise_parser_error\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mParserError\u001b[0m: Error tokenizing data. C error: Expected 631 fields in line 78, saw 6164\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# URL modificada de tu primer archivo\n",
        "url_1 = 'https://docs.google.com/spreadsheets/d/1tjmzAfUtEc1ILXYeCaW-IzghSMzAJSHrt4YlagYGZec/export?format=csv'\n",
        "\n",
        "# URL modificada de tu segundo archivo\n",
        "url_2 = 'https://docs.google.com/spreadsheets/d/1ZmaGdUmK0xjpbZ1HhCLYn8m7w3yXnxgS7g7GhzwCTBs/export?format=csv'\n",
        "\n",
        "\n",
        "# Carga cada archivo en un DataFrame separado\n",
        "df1 = pd.read_csv(url_1)\n",
        "df2 = pd.read_csv(url_2)\n",
        "\n",
        "# Muestra las primeras filas de cada uno para confirmar que cargaron bien\n",
        "print(\"Primer DataFrame:\")\n",
        "display(df1.head())\n",
        "\n",
        "print(\"\\nSegundo DataFrame:\")\n",
        "display(df2.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "MYNSBN4ooFVI",
        "outputId": "4ff0c3ba-005a-447f-e192-a2ba5d0aee82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Primer DataFrame:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol              company\n",
              "0         AAPL           Apple Inc.\n",
              "1         ADBE           Adobe Inc.\n",
              "2         AMZN     Amazon.com, Inc.\n",
              "3          CRM     Salesforce, Inc.\n",
              "4         CSCO  Cisco Systems, Inc."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0802a269-f2e0-41a7-b9f6-382b37d279bc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>company</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ADBE</td>\n",
              "      <td>Adobe Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AMZN</td>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CRM</td>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CSCO</td>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0802a269-f2e0-41a7-b9f6-382b37d279bc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0802a269-f2e0-41a7-b9f6-382b37d279bc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0802a269-f2e0-41a7-b9f6-382b37d279bc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bf8e2466-8383-4203-b196-7f9a25035cef\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf8e2466-8383-4203-b196-7f9a25035cef')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bf8e2466-8383-4203-b196-7f9a25035cef button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"ADBE\",\n          \"CSCO\",\n          \"AMZN\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Adobe Inc.\",\n          \"Cisco Systems, Inc.\",\n          \"Amazon.com, Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Segundo DataFrame:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol        date      open      high       low     close  adj_close  \\\n",
              "0         AAPL  2010-01-04  7.622500  7.660714  7.585000  7.643214   6.515213   \n",
              "1         AAPL  2010-01-05  7.664286  7.699643  7.616071  7.656429   6.526476   \n",
              "2         AAPL  2010-01-06  7.656429  7.686786  7.526786  7.534643   6.422664   \n",
              "3         AAPL  2010-01-07  7.562500  7.571429  7.466071  7.520714   6.410790   \n",
              "4         AAPL  2010-01-08  7.510714  7.571429  7.466429  7.570714   6.453412   \n",
              "\n",
              "        volume  \n",
              "0  493729600.0  \n",
              "1  601904800.0  \n",
              "2  552160000.0  \n",
              "3  477131200.0  \n",
              "4  447610800.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c4cd371-3012-4cf5-b037-19263c77ebfc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-04</td>\n",
              "      <td>7.622500</td>\n",
              "      <td>7.660714</td>\n",
              "      <td>7.585000</td>\n",
              "      <td>7.643214</td>\n",
              "      <td>6.515213</td>\n",
              "      <td>493729600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-05</td>\n",
              "      <td>7.664286</td>\n",
              "      <td>7.699643</td>\n",
              "      <td>7.616071</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>6.526476</td>\n",
              "      <td>601904800.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-06</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>7.686786</td>\n",
              "      <td>7.526786</td>\n",
              "      <td>7.534643</td>\n",
              "      <td>6.422664</td>\n",
              "      <td>552160000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-07</td>\n",
              "      <td>7.562500</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466071</td>\n",
              "      <td>7.520714</td>\n",
              "      <td>6.410790</td>\n",
              "      <td>477131200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-08</td>\n",
              "      <td>7.510714</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466429</td>\n",
              "      <td>7.570714</td>\n",
              "      <td>6.453412</td>\n",
              "      <td>447610800.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c4cd371-3012-4cf5-b037-19263c77ebfc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7c4cd371-3012-4cf5-b037-19263c77ebfc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7c4cd371-3012-4cf5-b037-19263c77ebfc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0641c814-d9da-4405-b267-8fb62fbb7e93\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0641c814-d9da-4405-b267-8fb62fbb7e93')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0641c814-d9da-4405-b267-8fb62fbb7e93 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"AAPL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2010-01-05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06547409645195561,\n        \"min\": 7.510714,\n        \"max\": 7.664286,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.664286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06236837163739306,\n        \"min\": 7.571429,\n        \"max\": 7.699643,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7.699643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06809971077251346,\n        \"min\": 7.466071,\n        \"max\": 7.616071,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.616071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.061974746709446284,\n        \"min\": 7.520714,\n        \"max\": 7.656429,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.656429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05282863589001687,\n        \"min\": 6.41079,\n        \"max\": 6.526476,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.526476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61967483.8207265,\n        \"min\": 447610800.0,\n        \"max\": 601904800.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          601904800.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Renombramos df1 para mayor claridad\n",
        "df_precios = df1\n",
        "\n",
        "# Contamos los valores nulos por columna\n",
        "print(\"Conteo de valores nulos en cada columna de df_precios:\")\n",
        "print(df_precios.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ket9p1iCtmvT",
        "outputId": "471ded55-8308-4a6b-8d42-bafd07dd9f9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conteo de valores nulos en cada columna de df_precios:\n",
            "stock_symbol    0\n",
            "company         0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Muestra la lista de todos los nombres de las columnas\n",
        "print(df_precios.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bzmetorev1vb",
        "outputId": "a999a3f8-0776-4402-d667-81bbbd31eeb5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['stock_symbol', 'company'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# This setting tells pandas not to hide any columns\n",
        "pd.set_option('display.max_columns', None)\n",
        "\n",
        "# Now, when you display your DataFrame, all columns will appear\n",
        "display(df_precios.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "a7ll3PwgwItb",
        "outputId": "8c281e84-3884-45cb-e9cf-3f6bef721ab1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol              company\n",
              "0         AAPL           Apple Inc.\n",
              "1         ADBE           Adobe Inc.\n",
              "2         AMZN     Amazon.com, Inc.\n",
              "3          CRM     Salesforce, Inc.\n",
              "4         CSCO  Cisco Systems, Inc."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ea5459d-cec6-4c05-99e3-9b686dfa3202\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>company</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ADBE</td>\n",
              "      <td>Adobe Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AMZN</td>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CRM</td>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CSCO</td>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ea5459d-cec6-4c05-99e3-9b686dfa3202')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ea5459d-cec6-4c05-99e3-9b686dfa3202 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ea5459d-cec6-4c05-99e3-9b686dfa3202');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-20be1bd3-234d-4ee9-a383-97fb8fd84636\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-20be1bd3-234d-4ee9-a383-97fb8fd84636')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-20be1bd3-234d-4ee9-a383-97fb8fd84636 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_precios\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"ADBE\",\n          \"CSCO\",\n          \"AMZN\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Adobe Inc.\",\n          \"Cisco Systems, Inc.\",\n          \"Amazon.com, Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Asignaci√≥n correcta: df1 es empresas, df2 es precios\n",
        "df_empresas = df1\n",
        "df_precios = df2\n",
        "\n",
        "print(\"¬°Listo! Las variables ahora apuntan a los DataFrames correctos.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qfac7tyJxF30",
        "outputId": "ff0f11fd-117d-4f2b-deca-a2aa7c3f72ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¬°Listo! Las variables ahora apuntan a los DataFrames correctos.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Count nulls in each column of the prices DataFrame\n",
        "print(\"Null value count per column in df_precios:\")\n",
        "print(df_precios.isnull().sum())\n",
        "\n",
        "# 2. Display the specific rows that contain any null values\n",
        "print(\"\\nRows with any null values:\")\n",
        "display(df_precios[df_precios.isnull().any(axis=1)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "umxEwZKQxRUH",
        "outputId": "fb9e2ee7-7152-48bd-db27-ba8823177e0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Null value count per column in df_precios:\n",
            "stock_symbol    0\n",
            "date            1\n",
            "open            1\n",
            "high            1\n",
            "low             1\n",
            "close           1\n",
            "adj_close       1\n",
            "volume          1\n",
            "dtype: int64\n",
            "\n",
            "Rows with any null values:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      stock_symbol date  open  high  low  close  adj_close  volume\n",
              "45089         TSLA  NaN   NaN   NaN  NaN    NaN        NaN     NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a979759c-5a3b-4215-a0b3-851facb2d772\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>45089</th>\n",
              "      <td>TSLA</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a979759c-5a3b-4215-a0b3-851facb2d772')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a979759c-5a3b-4215-a0b3-851facb2d772 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a979759c-5a3b-4215-a0b3-851facb2d772');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Guarda el n√∫mero de filas antes de eliminar\n",
        "filas_antes = len(df_precios)\n",
        "\n",
        "# Elimina las filas donde la columna 'date' es nula\n",
        "df_precios.dropna(subset=['date'], inplace=True)\n",
        "\n",
        "# Guarda el n√∫mero de filas despu√©s de eliminar\n",
        "filas_despues = len(df_precios)\n",
        "\n",
        "print(f\"Se eliminaron {filas_antes - filas_despues} filas.\")\n",
        "\n",
        "# Verificaci√≥n final: comprueba que ya no hay nulos\n",
        "print(\"\\nConteo de nulos DESPU√âS de eliminar la fila:\")\n",
        "print(df_precios.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XxsO9ucrxv14",
        "outputId": "61c42c31-9503-4294-f83f-9c1287037b5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Se eliminaron 1 filas.\n",
            "\n",
            "Conteo de nulos DESPU√âS de eliminar la fila:\n",
            "stock_symbol    0\n",
            "date            0\n",
            "open            0\n",
            "high            0\n",
            "low             0\n",
            "close           0\n",
            "adj_close       0\n",
            "volume          0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Guarda el n√∫mero de filas antes de eliminar duplicados\n",
        "filas_antes = len(df_precios)\n",
        "\n",
        "# Elimina las filas duplicadas bas√°ndose en 'stock_symbol' y 'date'\n",
        "df_precios.drop_duplicates(subset=['stock_symbol', 'date'], inplace=True)\n",
        "\n",
        "# Guarda el n√∫mero de filas despu√©s de la eliminaci√≥n\n",
        "filas_despues = len(df_precios)\n",
        "\n",
        "# Calcula y muestra cu√°ntos duplicados fueron eliminados\n",
        "duplicados_eliminados = filas_antes - filas_despues\n",
        "print(f\"Se eliminaron {duplicados_eliminados} filas duplicadas.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V67sSUuEyX2f",
        "outputId": "106a3a87-e34d-4b92-a103-6340c6da2b89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Se eliminaron 1 filas duplicadas.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Aseg√∫rate de que la columna 'date' est√© en formato de fecha\n",
        "df_precios['date'] = pd.to_datetime(df_precios['date'])\n",
        "\n",
        "# Guarda el n√∫mero de filas antes de filtrar\n",
        "filas_antes = len(df_precios)\n",
        "\n",
        "# Define el criterio: mantener solo los datos del a√±o 2023\n",
        "df_precios = df_precios[df_precios['date'].dt.year == 2023]\n",
        "\n",
        "# Guarda el n√∫mero de filas despu√©s de filtrar\n",
        "filas_despues = len(df_precios)\n",
        "\n",
        "# Informa sobre los datos eliminados\n",
        "print(\"Criterio aplicado: Se mantuvieron solo los registros del a√±o 2023.\")\n",
        "print(f\"Se eliminaron {filas_antes - filas_despues} filas fuera de este alcance.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jvq3uqkhy1Tt",
        "outputId": "fbfccdca-86aa-4509-90d4-532e937360e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Criterio aplicado: Se mantuvieron solo los registros del a√±o 2023.\n",
            "Se eliminaron 45073 filas fuera de este alcance.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Confirma el rango de fechas para ver todos los a√±os\n",
        "fecha_inicio = df_precios['date'].min()\n",
        "fecha_fin = df_precios['date'].max()\n",
        "\n",
        "print(f\"Datos restaurados. El nuevo rango de fechas es: {fecha_inicio.date()} a {fecha_fin.date()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "UDzRuueP2paJ",
        "outputId": "4726c737-1d55-4e73-c3fb-a6daf2d32bc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'str' object has no attribute 'date'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1316419042.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mfecha_fin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_precios\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Datos restaurados. El nuevo rango de fechas es: {fecha_inicio.date()} a {fecha_fin.date()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'str' object has no attribute 'date'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Convert the 'date' column to datetime objects first\n",
        "df_precios['date'] = pd.to_datetime(df_precios['date'])\n",
        "\n",
        "# Now you can find the min and max dates\n",
        "fecha_inicio = df_precios['date'].min()\n",
        "fecha_fin = df_precios['date'].max()\n",
        "\n",
        "# This print statement will now work correctly\n",
        "print(f\"Datos restaurados. El nuevo rango de fechas es: {fecha_inicio.date()} a {fecha_fin.date()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "btiaqX363IT5",
        "outputId": "0c022e15-cefc-4b0c-fe21-1a64269f5ea5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Datos restaurados. El nuevo rango de fechas es: 2010-01-04 a 2023-01-24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# First, ensure your date column is in the correct format\n",
        "df_precios['date'] = pd.to_datetime(df_precios['date'])\n",
        "\n",
        "# Define the start and end of your desired period\n",
        "start_date = '2020-01-01'\n",
        "end_date = '2023-12-31'\n",
        "\n",
        "# Filter the data to the specified range and save it to a new DataFrame\n",
        "df_periodo_definido = df_precios[\n",
        "    (df_precios['date'] >= start_date) & (df_precios['date'] <= end_date)\n",
        "].copy()\n",
        "\n",
        "\n",
        "# --- Verification Step ---\n",
        "fecha_inicio = df_periodo_definido['date'].min().date()\n",
        "fecha_fin = df_periodo_definido['date'].max().date()\n",
        "\n",
        "print(f\"The new date range is: {fecha_inicio} to {fecha_fin}\")\n",
        "print(f\"{len(df_periodo_definido)} rows were kept for the analysis.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ToFCD6ap4U9i",
        "outputId": "ebe82344-0a21-4c55-e9d9-caf3cf533644"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The new date range is: 2020-01-02 to 2023-01-24\n",
            "10586 rows were kept for the analysis.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_empresas.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1jATHHy46cEv",
        "outputId": "9c437dc4-1de6-4a0d-e4f0-77e0483fcf43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['stock_symbol', 'company'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Using the correct lowercase name 'company'\n",
        "print(df_empresas['company'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5lrg9ICW6qqg",
        "outputId": "4aa053ab-2ea5-4089-c5e6-3ade44b1bbb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "company\n",
            "Apple Inc.                                     1\n",
            "Adobe Inc.                                     1\n",
            "Amazon.com, Inc.                               1\n",
            "Salesforce, Inc.                               1\n",
            "Cisco Systems, Inc.                            1\n",
            "Alphabet Inc.                                  1\n",
            "International Business Machines Corporation    1\n",
            "Intel Corporation                              1\n",
            "Meta Platforms, Inc.                           1\n",
            "Microsoft Corporation                          1\n",
            "Netflix, Inc.                                  1\n",
            "NVIDIA Corporation                             1\n",
            "Oracle Corporation                             1\n",
            "Tesla, Inc.                                    1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import zscore\n",
        "import numpy as np\n",
        "\n",
        "# Calculate Z-scores for the 'volume' column\n",
        "df_precios['volume_zscore'] = np.abs(zscore(df_precios['volume']))\n",
        "\n",
        "# Set a threshold of 3\n",
        "threshold = 3\n",
        "\n",
        "# Identify outliers\n",
        "outliers_zscore = df_precios[df_precios['volume_zscore'] > threshold]\n",
        "\n",
        "print(f\"Z-Score Method: Found {len(outliers_zscore)} outliers in 'volume'.\")\n",
        "display(outliers_zscore.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "mhqWgl_67ULB",
        "outputId": "0f4deaa5-c711-4e2a-a819-20e1a6bf4764"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Z-Score Method: Found 974 outliers in 'volume'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol       date      open      high       low     close  adj_close  \\\n",
              "0         AAPL 2010-01-04  7.622500  7.660714  7.585000  7.643214   6.515213   \n",
              "1         AAPL 2010-01-05  7.664286  7.699643  7.616071  7.656429   6.526476   \n",
              "2         AAPL 2010-01-06  7.656429  7.686786  7.526786  7.534643   6.422664   \n",
              "3         AAPL 2010-01-07  7.562500  7.571429  7.466071  7.520714   6.410790   \n",
              "4         AAPL 2010-01-08  7.510714  7.571429  7.466429  7.570714   6.453412   \n",
              "\n",
              "        volume  volume_zscore  \n",
              "0  493729600.0       4.726747  \n",
              "1  601904800.0       5.886849  \n",
              "2  552160000.0       5.353371  \n",
              "3  477131200.0       4.548741  \n",
              "4  447610800.0       4.232155  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f47e4473-4fbf-4bc6-be56-0b5c1f40f7e8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "      <th>volume_zscore</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-04</td>\n",
              "      <td>7.622500</td>\n",
              "      <td>7.660714</td>\n",
              "      <td>7.585000</td>\n",
              "      <td>7.643214</td>\n",
              "      <td>6.515213</td>\n",
              "      <td>493729600.0</td>\n",
              "      <td>4.726747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-05</td>\n",
              "      <td>7.664286</td>\n",
              "      <td>7.699643</td>\n",
              "      <td>7.616071</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>6.526476</td>\n",
              "      <td>601904800.0</td>\n",
              "      <td>5.886849</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-06</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>7.686786</td>\n",
              "      <td>7.526786</td>\n",
              "      <td>7.534643</td>\n",
              "      <td>6.422664</td>\n",
              "      <td>552160000.0</td>\n",
              "      <td>5.353371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-07</td>\n",
              "      <td>7.562500</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466071</td>\n",
              "      <td>7.520714</td>\n",
              "      <td>6.410790</td>\n",
              "      <td>477131200.0</td>\n",
              "      <td>4.548741</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-08</td>\n",
              "      <td>7.510714</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466429</td>\n",
              "      <td>7.570714</td>\n",
              "      <td>6.453412</td>\n",
              "      <td>447610800.0</td>\n",
              "      <td>4.232155</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f47e4473-4fbf-4bc6-be56-0b5c1f40f7e8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f47e4473-4fbf-4bc6-be56-0b5c1f40f7e8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f47e4473-4fbf-4bc6-be56-0b5c1f40f7e8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3995e4ba-7924-4997-a609-c1c47dafbb4a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3995e4ba-7924-4997-a609-c1c47dafbb4a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3995e4ba-7924-4997-a609-c1c47dafbb4a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(outliers_zscore\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"AAPL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-01-04 00:00:00\",\n        \"max\": \"2010-01-08 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2010-01-05 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06547409645195561,\n        \"min\": 7.510714,\n        \"max\": 7.664286,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.664286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06236837163739306,\n        \"min\": 7.571429,\n        \"max\": 7.699643,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7.699643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06809971077251346,\n        \"min\": 7.466071,\n        \"max\": 7.616071,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.616071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.061974746709446284,\n        \"min\": 7.520714,\n        \"max\": 7.656429,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.656429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05282863589001687,\n        \"min\": 6.41079,\n        \"max\": 6.526476,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.526476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61967483.8207265,\n        \"min\": 447610800.0,\n        \"max\": 601904800.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          601904800.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume_zscore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6645572982665227,\n        \"min\": 4.232155389500018,\n        \"max\": 5.886849068452315,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.886849068452315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate Q1 (25th percentile) and Q3 (75th percentile)\n",
        "Q1 = df_precios['volume'].quantile(0.25)\n",
        "Q3 = df_precios['volume'].quantile(0.75)\n",
        "\n",
        "# Calculate the Interquartile Range (IQR)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Define the outlier boundaries\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "# Identify outliers\n",
        "outliers_iqr = df_precios[(df_precios['volume'] < lower_bound) | (df_precios['volume'] > upper_bound)]\n",
        "\n",
        "print(f\"\\nIQR Method: Found {len(outliers_iqr)} outliers in 'volume'.\")\n",
        "display(outliers_iqr.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "cJlTpVOl7vI5",
        "outputId": "df516f67-4efa-4e8a-ae5e-39301240bd8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "IQR Method: Found 3462 outliers in 'volume'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol       date      open      high       low     close  adj_close  \\\n",
              "0         AAPL 2010-01-04  7.622500  7.660714  7.585000  7.643214   6.515213   \n",
              "1         AAPL 2010-01-05  7.664286  7.699643  7.616071  7.656429   6.526476   \n",
              "2         AAPL 2010-01-06  7.656429  7.686786  7.526786  7.534643   6.422664   \n",
              "3         AAPL 2010-01-07  7.562500  7.571429  7.466071  7.520714   6.410790   \n",
              "4         AAPL 2010-01-08  7.510714  7.571429  7.466429  7.570714   6.453412   \n",
              "\n",
              "        volume  volume_zscore  \n",
              "0  493729600.0       4.726747  \n",
              "1  601904800.0       5.886849  \n",
              "2  552160000.0       5.353371  \n",
              "3  477131200.0       4.548741  \n",
              "4  447610800.0       4.232155  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae03a70f-d261-4590-899f-7e6e4cc8d3ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "      <th>volume_zscore</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-04</td>\n",
              "      <td>7.622500</td>\n",
              "      <td>7.660714</td>\n",
              "      <td>7.585000</td>\n",
              "      <td>7.643214</td>\n",
              "      <td>6.515213</td>\n",
              "      <td>493729600.0</td>\n",
              "      <td>4.726747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-05</td>\n",
              "      <td>7.664286</td>\n",
              "      <td>7.699643</td>\n",
              "      <td>7.616071</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>6.526476</td>\n",
              "      <td>601904800.0</td>\n",
              "      <td>5.886849</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-06</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>7.686786</td>\n",
              "      <td>7.526786</td>\n",
              "      <td>7.534643</td>\n",
              "      <td>6.422664</td>\n",
              "      <td>552160000.0</td>\n",
              "      <td>5.353371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-07</td>\n",
              "      <td>7.562500</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466071</td>\n",
              "      <td>7.520714</td>\n",
              "      <td>6.410790</td>\n",
              "      <td>477131200.0</td>\n",
              "      <td>4.548741</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-08</td>\n",
              "      <td>7.510714</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466429</td>\n",
              "      <td>7.570714</td>\n",
              "      <td>6.453412</td>\n",
              "      <td>447610800.0</td>\n",
              "      <td>4.232155</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae03a70f-d261-4590-899f-7e6e4cc8d3ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ae03a70f-d261-4590-899f-7e6e4cc8d3ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ae03a70f-d261-4590-899f-7e6e4cc8d3ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-049b4f4d-7731-4b14-b197-8764b1f65a71\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-049b4f4d-7731-4b14-b197-8764b1f65a71')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-049b4f4d-7731-4b14-b197-8764b1f65a71 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(outliers_iqr\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"AAPL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-01-04 00:00:00\",\n        \"max\": \"2010-01-08 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2010-01-05 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06547409645195561,\n        \"min\": 7.510714,\n        \"max\": 7.664286,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.664286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06236837163739306,\n        \"min\": 7.571429,\n        \"max\": 7.699643,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7.699643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06809971077251346,\n        \"min\": 7.466071,\n        \"max\": 7.616071,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.616071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.061974746709446284,\n        \"min\": 7.520714,\n        \"max\": 7.656429,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.656429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05282863589001687,\n        \"min\": 6.41079,\n        \"max\": 6.526476,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.526476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61967483.8207265,\n        \"min\": 447610800.0,\n        \"max\": 601904800.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          601904800.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume_zscore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6645572982665227,\n        \"min\": 4.232155389500018,\n        \"max\": 5.886849068452315,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.886849068452315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the data types of all columns\n",
        "print(\"Current data types in df_precios:\")\n",
        "print(df_precios.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f9y7F7fa8mM5",
        "outputId": "9456f0c0-3170-4b2f-a48f-dd0323bf90a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Current data types in df_precios:\n",
            "stock_symbol             object\n",
            "date             datetime64[ns]\n",
            "open                    float64\n",
            "high                    float64\n",
            "low                     float64\n",
            "close                   float64\n",
            "adj_close               float64\n",
            "volume                  float64\n",
            "volume_zscore           float64\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Merge the two DataFrames\n",
        "df_completo = pd.merge(df_precios, df_empresas, on='stock_symbol')\n",
        "\n",
        "# --- Verification Step ---\n",
        "# Display the first few rows to see the result\n",
        "print(\"Merge successful. First 5 rows of the complete DataFrame:\")\n",
        "display(df_completo.head())\n",
        "\n",
        "# Check the new DataFrame's info to confirm columns and non-null counts\n",
        "print(\"\\nDataFrame Info:\")\n",
        "df_completo.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "4jae9NTE9H4B",
        "outputId": "6d2d2e01-fc8a-438f-c971-a6f6c13f51b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Merge successful. First 5 rows of the complete DataFrame:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol       date      open      high       low     close  adj_close  \\\n",
              "0         AAPL 2010-01-04  7.622500  7.660714  7.585000  7.643214   6.515213   \n",
              "1         AAPL 2010-01-05  7.664286  7.699643  7.616071  7.656429   6.526476   \n",
              "2         AAPL 2010-01-06  7.656429  7.686786  7.526786  7.534643   6.422664   \n",
              "3         AAPL 2010-01-07  7.562500  7.571429  7.466071  7.520714   6.410790   \n",
              "4         AAPL 2010-01-08  7.510714  7.571429  7.466429  7.570714   6.453412   \n",
              "\n",
              "        volume  volume_zscore     company  \n",
              "0  493729600.0       4.726747  Apple Inc.  \n",
              "1  601904800.0       5.886849  Apple Inc.  \n",
              "2  552160000.0       5.353371  Apple Inc.  \n",
              "3  477131200.0       4.548741  Apple Inc.  \n",
              "4  447610800.0       4.232155  Apple Inc.  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33b0828c-a6b8-42e5-87ac-5871dd54f085\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "      <th>volume_zscore</th>\n",
              "      <th>company</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-04</td>\n",
              "      <td>7.622500</td>\n",
              "      <td>7.660714</td>\n",
              "      <td>7.585000</td>\n",
              "      <td>7.643214</td>\n",
              "      <td>6.515213</td>\n",
              "      <td>493729600.0</td>\n",
              "      <td>4.726747</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-05</td>\n",
              "      <td>7.664286</td>\n",
              "      <td>7.699643</td>\n",
              "      <td>7.616071</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>6.526476</td>\n",
              "      <td>601904800.0</td>\n",
              "      <td>5.886849</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-06</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>7.686786</td>\n",
              "      <td>7.526786</td>\n",
              "      <td>7.534643</td>\n",
              "      <td>6.422664</td>\n",
              "      <td>552160000.0</td>\n",
              "      <td>5.353371</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-07</td>\n",
              "      <td>7.562500</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466071</td>\n",
              "      <td>7.520714</td>\n",
              "      <td>6.410790</td>\n",
              "      <td>477131200.0</td>\n",
              "      <td>4.548741</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-08</td>\n",
              "      <td>7.510714</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466429</td>\n",
              "      <td>7.570714</td>\n",
              "      <td>6.453412</td>\n",
              "      <td>447610800.0</td>\n",
              "      <td>4.232155</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33b0828c-a6b8-42e5-87ac-5871dd54f085')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-33b0828c-a6b8-42e5-87ac-5871dd54f085 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-33b0828c-a6b8-42e5-87ac-5871dd54f085');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a9af484c-4591-4eff-a22d-1d257f44cdc9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a9af484c-4591-4eff-a22d-1d257f44cdc9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a9af484c-4591-4eff-a22d-1d257f44cdc9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_completo\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"AAPL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-01-04 00:00:00\",\n        \"max\": \"2010-01-08 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2010-01-05 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06547409645195561,\n        \"min\": 7.510714,\n        \"max\": 7.664286,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.664286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06236837163739306,\n        \"min\": 7.571429,\n        \"max\": 7.699643,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7.699643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06809971077251346,\n        \"min\": 7.466071,\n        \"max\": 7.616071,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.616071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.061974746709446284,\n        \"min\": 7.520714,\n        \"max\": 7.656429,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.656429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05282863589001687,\n        \"min\": 6.41079,\n        \"max\": 6.526476,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.526476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61967483.8207265,\n        \"min\": 447610800.0,\n        \"max\": 601904800.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          601904800.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume_zscore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6645572982665227,\n        \"min\": 4.232155389500018,\n        \"max\": 5.886849068452315,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.886849068452315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Apple Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45088 entries, 0 to 45087\n",
            "Data columns (total 10 columns):\n",
            " #   Column         Non-Null Count  Dtype         \n",
            "---  ------         --------------  -----         \n",
            " 0   stock_symbol   45088 non-null  object        \n",
            " 1   date           45088 non-null  datetime64[ns]\n",
            " 2   open           45088 non-null  float64       \n",
            " 3   high           45088 non-null  float64       \n",
            " 4   low            45088 non-null  float64       \n",
            " 5   close          45088 non-null  float64       \n",
            " 6   adj_close      45088 non-null  float64       \n",
            " 7   volume         45088 non-null  float64       \n",
            " 8   volume_zscore  45088 non-null  float64       \n",
            " 9   company        45088 non-null  object        \n",
            "dtypes: datetime64[ns](1), float64(7), object(2)\n",
            "memory usage: 3.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Merge the two DataFrames using their common key\n",
        "df_completo = pd.merge(df_precios, df_empresas, on='stock_symbol')\n",
        "\n",
        "# Display the first few rows of the final merged DataFrame\n",
        "print(\"First 5 rows of the merged DataFrame:\")\n",
        "display(df_completo.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "aB8TY6Ks9lLX",
        "outputId": "fa77af23-1bdd-4992-e456-f17a00db28f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First 5 rows of the merged DataFrame:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol       date      open      high       low     close  adj_close  \\\n",
              "0         AAPL 2010-01-04  7.622500  7.660714  7.585000  7.643214   6.515213   \n",
              "1         AAPL 2010-01-05  7.664286  7.699643  7.616071  7.656429   6.526476   \n",
              "2         AAPL 2010-01-06  7.656429  7.686786  7.526786  7.534643   6.422664   \n",
              "3         AAPL 2010-01-07  7.562500  7.571429  7.466071  7.520714   6.410790   \n",
              "4         AAPL 2010-01-08  7.510714  7.571429  7.466429  7.570714   6.453412   \n",
              "\n",
              "        volume  volume_zscore     company  \n",
              "0  493729600.0       4.726747  Apple Inc.  \n",
              "1  601904800.0       5.886849  Apple Inc.  \n",
              "2  552160000.0       5.353371  Apple Inc.  \n",
              "3  477131200.0       4.548741  Apple Inc.  \n",
              "4  447610800.0       4.232155  Apple Inc.  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3a3cd74-7a47-446c-bebe-0c710120b681\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "      <th>volume_zscore</th>\n",
              "      <th>company</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-04</td>\n",
              "      <td>7.622500</td>\n",
              "      <td>7.660714</td>\n",
              "      <td>7.585000</td>\n",
              "      <td>7.643214</td>\n",
              "      <td>6.515213</td>\n",
              "      <td>493729600.0</td>\n",
              "      <td>4.726747</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-05</td>\n",
              "      <td>7.664286</td>\n",
              "      <td>7.699643</td>\n",
              "      <td>7.616071</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>6.526476</td>\n",
              "      <td>601904800.0</td>\n",
              "      <td>5.886849</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-06</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>7.686786</td>\n",
              "      <td>7.526786</td>\n",
              "      <td>7.534643</td>\n",
              "      <td>6.422664</td>\n",
              "      <td>552160000.0</td>\n",
              "      <td>5.353371</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-07</td>\n",
              "      <td>7.562500</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466071</td>\n",
              "      <td>7.520714</td>\n",
              "      <td>6.410790</td>\n",
              "      <td>477131200.0</td>\n",
              "      <td>4.548741</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-08</td>\n",
              "      <td>7.510714</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466429</td>\n",
              "      <td>7.570714</td>\n",
              "      <td>6.453412</td>\n",
              "      <td>447610800.0</td>\n",
              "      <td>4.232155</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3a3cd74-7a47-446c-bebe-0c710120b681')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d3a3cd74-7a47-446c-bebe-0c710120b681 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d3a3cd74-7a47-446c-bebe-0c710120b681');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6044b3c3-445d-4b67-b41f-115f86dec07a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6044b3c3-445d-4b67-b41f-115f86dec07a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6044b3c3-445d-4b67-b41f-115f86dec07a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_completo\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"AAPL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-01-04 00:00:00\",\n        \"max\": \"2010-01-08 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2010-01-05 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06547409645195561,\n        \"min\": 7.510714,\n        \"max\": 7.664286,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.664286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06236837163739306,\n        \"min\": 7.571429,\n        \"max\": 7.699643,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7.699643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06809971077251346,\n        \"min\": 7.466071,\n        \"max\": 7.616071,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.616071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.061974746709446284,\n        \"min\": 7.520714,\n        \"max\": 7.656429,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.656429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05282863589001687,\n        \"min\": 6.41079,\n        \"max\": 6.526476,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.526476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61967483.8207265,\n        \"min\": 447610800.0,\n        \"max\": 601904800.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          601904800.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume_zscore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6645572982665227,\n        \"min\": 4.232155389500018,\n        \"max\": 5.886849068452315,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.886849068452315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Apple Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group by 'company' and calculate the mean for key numeric columns\n",
        "resumen_por_empresa = df_completo.groupby('company').agg(\n",
        "    precio_promedio_ajustado=('adj_close', 'mean'),\n",
        "    volumen_promedio=('volume', 'mean')\n",
        ").reset_index()\n",
        "\n",
        "# Sort the results for better readability\n",
        "resumen_por_empresa = resumen_por_empresa.sort_values(by='precio_promedio_ajustado', ascending=False)\n",
        "\n",
        "print(\"Resumen estad√≠stico por empresa:\")\n",
        "display(resumen_por_empresa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "srjbULGY_OaA",
        "outputId": "6522018d-c2c7-4528-eb88-6e824f62fe7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Resumen estad√≠stico por empresa:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                        company  precio_promedio_ajustado  \\\n",
              "10                                Netflix, Inc.                188.252178   \n",
              "0                                    Adobe Inc.                186.022299   \n",
              "7                          Meta Platforms, Inc.                147.913244   \n",
              "6   International Business Machines Corporation                113.148579   \n",
              "12                             Salesforce, Inc.                103.400510   \n",
              "8                         Microsoft Corporation                 95.285446   \n",
              "2                              Amazon.com, Inc.                 58.905287   \n",
              "13                                  Tesla, Inc.                 58.805222   \n",
              "9                            NVIDIA Corporation                 50.282939   \n",
              "3                                    Apple Inc.                 49.445122   \n",
              "1                                 Alphabet Inc.                 49.148954   \n",
              "11                           Oracle Corporation                 42.572566   \n",
              "5                             Intel Corporation                 31.310983   \n",
              "4                           Cisco Systems, Inc.                 28.624463   \n",
              "\n",
              "    volumen_promedio  \n",
              "10      1.841485e+07  \n",
              "0       3.814337e+06  \n",
              "7       3.117815e+07  \n",
              "6       5.036545e+06  \n",
              "12      6.910973e+06  \n",
              "8       3.801647e+07  \n",
              "2       8.833999e+07  \n",
              "13      9.351647e+07  \n",
              "9       5.080613e+07  \n",
              "3       2.563255e+08  \n",
              "1       6.018647e+07  \n",
              "11      1.801856e+07  \n",
              "5       3.607170e+07  \n",
              "4       3.269656e+07  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-488b6402-c0bd-48e9-a39c-182639eacb22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>company</th>\n",
              "      <th>precio_promedio_ajustado</th>\n",
              "      <th>volumen_promedio</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Netflix, Inc.</td>\n",
              "      <td>188.252178</td>\n",
              "      <td>1.841485e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adobe Inc.</td>\n",
              "      <td>186.022299</td>\n",
              "      <td>3.814337e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Meta Platforms, Inc.</td>\n",
              "      <td>147.913244</td>\n",
              "      <td>3.117815e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>International Business Machines Corporation</td>\n",
              "      <td>113.148579</td>\n",
              "      <td>5.036545e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "      <td>103.400510</td>\n",
              "      <td>6.910973e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Microsoft Corporation</td>\n",
              "      <td>95.285446</td>\n",
              "      <td>3.801647e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "      <td>58.905287</td>\n",
              "      <td>8.833999e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Tesla, Inc.</td>\n",
              "      <td>58.805222</td>\n",
              "      <td>9.351647e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NVIDIA Corporation</td>\n",
              "      <td>50.282939</td>\n",
              "      <td>5.080613e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Apple Inc.</td>\n",
              "      <td>49.445122</td>\n",
              "      <td>2.563255e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alphabet Inc.</td>\n",
              "      <td>49.148954</td>\n",
              "      <td>6.018647e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Oracle Corporation</td>\n",
              "      <td>42.572566</td>\n",
              "      <td>1.801856e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Intel Corporation</td>\n",
              "      <td>31.310983</td>\n",
              "      <td>3.607170e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "      <td>28.624463</td>\n",
              "      <td>3.269656e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-488b6402-c0bd-48e9-a39c-182639eacb22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-488b6402-c0bd-48e9-a39c-182639eacb22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-488b6402-c0bd-48e9-a39c-182639eacb22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a1d4682f-791b-410d-8803-6b96a40446fc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1d4682f-791b-410d-8803-6b96a40446fc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a1d4682f-791b-410d-8803-6b96a40446fc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c0ceaa61-b57f-4b28-aaec-27168e7a2445\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('resumen_por_empresa')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c0ceaa61-b57f-4b28-aaec-27168e7a2445 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('resumen_por_empresa');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "resumen_por_empresa",
              "summary": "{\n  \"name\": \"resumen_por_empresa\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Apple Inc.\",\n          \"Oracle Corporation\",\n          \"Netflix, Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"precio_promedio_ajustado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.79446516023557,\n        \"min\": 28.62446335952308,\n        \"max\": 188.2521778862733,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          49.445122337205746,\n          42.57256598471416,\n          188.2521778862733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volumen_promedio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65015367.17590029,\n        \"min\": 3814336.655457047,\n        \"max\": 256325536.41088352,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          256325536.41088352,\n          18018558.60593091,\n          18414854.14246408\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a full statistical summary just for Apple\n",
        "apple_data = df_completo[df_completo['company'] == 'Apple Inc.']\n",
        "display(apple_data[['adj_close', 'volume']].describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "d0OVXCxt_hKW",
        "outputId": "081a9463-f811-4ed2-8cf7-8e74200239f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         adj_close        volume\n",
              "count  3271.000000  3.271000e+03\n",
              "mean     49.445122  2.563255e+08\n",
              "std      47.810585  2.225768e+08\n",
              "min       5.846675  3.519590e+07\n",
              "25%      16.625739  1.023724e+08\n",
              "50%      27.385101  1.666740e+08\n",
              "75%      54.876044  3.457554e+08\n",
              "max     180.959732  1.880998e+09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e170c96d-5be5-4a04-a031-63a4469f7525\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3271.000000</td>\n",
              "      <td>3.271000e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>49.445122</td>\n",
              "      <td>2.563255e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>47.810585</td>\n",
              "      <td>2.225768e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.846675</td>\n",
              "      <td>3.519590e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>16.625739</td>\n",
              "      <td>1.023724e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>27.385101</td>\n",
              "      <td>1.666740e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>54.876044</td>\n",
              "      <td>3.457554e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>180.959732</td>\n",
              "      <td>1.880998e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e170c96d-5be5-4a04-a031-63a4469f7525')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e170c96d-5be5-4a04-a031-63a4469f7525 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e170c96d-5be5-4a04-a031-63a4469f7525');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5d793c73-46db-4260-bb2c-61777876a57b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5d793c73-46db-4260-bb2c-61777876a57b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5d793c73-46db-4260-bb2c-61777876a57b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(apple_data[['adj_close', 'volume']]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1138.4244820528368,\n        \"min\": 5.846675,\n        \"max\": 3271.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          49.445122337205746,\n          27.385101,\n          3271.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 618755010.2461566,\n        \"min\": 3271.0,\n        \"max\": 1880998000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          256325536.41088352,\n          166674000.0,\n          3271.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Set the display format for floating-point numbers\n",
        "pd.options.display.float_format = '{:.2f}'.format\n",
        "\n",
        "# Now, display your summary DataFrame again to see the change\n",
        "display(resumen_por_empresa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "5tFRmWTI_1zV",
        "outputId": "7965e1b9-1edf-4101-dcbf-8fc053075aac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                        company  precio_promedio_ajustado  \\\n",
              "10                                Netflix, Inc.                    188.25   \n",
              "0                                    Adobe Inc.                    186.02   \n",
              "7                          Meta Platforms, Inc.                    147.91   \n",
              "6   International Business Machines Corporation                    113.15   \n",
              "12                             Salesforce, Inc.                    103.40   \n",
              "8                         Microsoft Corporation                     95.29   \n",
              "2                              Amazon.com, Inc.                     58.91   \n",
              "13                                  Tesla, Inc.                     58.81   \n",
              "9                            NVIDIA Corporation                     50.28   \n",
              "3                                    Apple Inc.                     49.45   \n",
              "1                                 Alphabet Inc.                     49.15   \n",
              "11                           Oracle Corporation                     42.57   \n",
              "5                             Intel Corporation                     31.31   \n",
              "4                           Cisco Systems, Inc.                     28.62   \n",
              "\n",
              "    volumen_promedio  \n",
              "10       18414854.14  \n",
              "0         3814336.66  \n",
              "7        31178146.69  \n",
              "6         5036544.90  \n",
              "12        6910973.46  \n",
              "8        38016469.34  \n",
              "2        88339985.05  \n",
              "13       93516465.69  \n",
              "9        50806126.60  \n",
              "3       256325536.41  \n",
              "1        60186468.94  \n",
              "11       18018558.61  \n",
              "5        36071695.51  \n",
              "4        32696560.26  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ec16692-bd62-47dc-83e8-f6c0426a9ffa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>company</th>\n",
              "      <th>precio_promedio_ajustado</th>\n",
              "      <th>volumen_promedio</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Netflix, Inc.</td>\n",
              "      <td>188.25</td>\n",
              "      <td>18414854.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adobe Inc.</td>\n",
              "      <td>186.02</td>\n",
              "      <td>3814336.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Meta Platforms, Inc.</td>\n",
              "      <td>147.91</td>\n",
              "      <td>31178146.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>International Business Machines Corporation</td>\n",
              "      <td>113.15</td>\n",
              "      <td>5036544.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "      <td>103.40</td>\n",
              "      <td>6910973.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Microsoft Corporation</td>\n",
              "      <td>95.29</td>\n",
              "      <td>38016469.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "      <td>58.91</td>\n",
              "      <td>88339985.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Tesla, Inc.</td>\n",
              "      <td>58.81</td>\n",
              "      <td>93516465.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NVIDIA Corporation</td>\n",
              "      <td>50.28</td>\n",
              "      <td>50806126.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Apple Inc.</td>\n",
              "      <td>49.45</td>\n",
              "      <td>256325536.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alphabet Inc.</td>\n",
              "      <td>49.15</td>\n",
              "      <td>60186468.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Oracle Corporation</td>\n",
              "      <td>42.57</td>\n",
              "      <td>18018558.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Intel Corporation</td>\n",
              "      <td>31.31</td>\n",
              "      <td>36071695.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "      <td>28.62</td>\n",
              "      <td>32696560.26</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ec16692-bd62-47dc-83e8-f6c0426a9ffa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3ec16692-bd62-47dc-83e8-f6c0426a9ffa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3ec16692-bd62-47dc-83e8-f6c0426a9ffa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-412d2f70-6593-4cd8-a179-f1b11f9390cd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-412d2f70-6593-4cd8-a179-f1b11f9390cd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-412d2f70-6593-4cd8-a179-f1b11f9390cd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_a70dd0b2-cf0b-45ef-ba6d-a0283e7369d6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('resumen_por_empresa')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a70dd0b2-cf0b-45ef-ba6d-a0283e7369d6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('resumen_por_empresa');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "resumen_por_empresa",
              "summary": "{\n  \"name\": \"resumen_por_empresa\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Apple Inc.\",\n          \"Oracle Corporation\",\n          \"Netflix, Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"precio_promedio_ajustado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.79446516023557,\n        \"min\": 28.62446335952308,\n        \"max\": 188.2521778862733,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          49.445122337205746,\n          42.57256598471416,\n          188.2521778862733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volumen_promedio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65015367.17590029,\n        \"min\": 3814336.655457047,\n        \"max\": 256325536.41088352,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          256325536.41088352,\n          18018558.60593091,\n          18414854.14246408\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set the style for the plots\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Create the bar chart\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.countplot(y='company', data=df_completo, order=df_completo['company'].value_counts().index, palette='viridis')\n",
        "plt.title('Number of Trading Days Recorded per Company')\n",
        "plt.xlabel('Count of Records')\n",
        "plt.ylabel('Company')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 805
        },
        "id": "tg-dbEs-AXcH",
        "outputId": "9f9bf047-a547-4376-c818-a5b11ecfc30e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2697933947.py:9: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(y='company', data=df_completo, order=df_completo['company'].value_counts().index, palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the data for the pie chart\n",
        "company_counts = df_completo['company'].value_counts()\n",
        "\n",
        "# Create the pie chart\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.pie(company_counts, labels=company_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('viridis', len(company_counts)))\n",
        "plt.title('Proportion of Data per Company')\n",
        "plt.ylabel('') # Hide the y-label\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 829
        },
        "id": "ENrcK9SkBf2J",
        "outputId": "8a0c8338-e27c-4912-80fd-583ab99fa720"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "170fb65f",
        "outputId": "350acf07-9565-4670-f40c-3bc567414812"
      },
      "source": [
        "# Calculate the mean, median, and mode of the 'adj_close' column\n",
        "mean_adj_close = df_completo['adj_close'].mean()\n",
        "median_adj_close = df_completo['adj_close'].median()\n",
        "mode_adj_close = df_completo['adj_close'].mode()\n",
        "\n",
        "print(f\"Mean of 'adj_close': {mean_adj_close:.2f}\")\n",
        "print(f\"Median of 'adj_close': {median_adj_close:.2f}\")\n",
        "print(f\"Mode of 'adj_close': {mode_adj_close.tolist()}\") # .tolist() to display all modes if there are multiple\n",
        "\n",
        "# Identify potential outliers using the IQR method for 'adj_close'\n",
        "Q1_adj_close = df_completo['adj_close'].quantile(0.25)\n",
        "Q3_adj_close = df_completo['adj_close'].quantile(0.75)\n",
        "IQR_adj_close = Q3_adj_close - Q1_adj_close\n",
        "\n",
        "lower_bound_adj_close = Q1_adj_close - 1.5 * IQR_adj_close\n",
        "upper_bound_adj_close = Q3_adj_close + 1.5 * IQR_adj_close\n",
        "\n",
        "outliers_adj_close = df_completo[\n",
        "    (df_completo['adj_close'] < lower_bound_adj_close) | (df_completo['adj_close'] > upper_bound_adj_close)\n",
        "]\n",
        "\n",
        "print(f\"\\nNumber of potential outliers in 'adj_close' using IQR method: {len(outliers_adj_close)}\")\n",
        "display(outliers_adj_close.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean of 'adj_close': 85.21\n",
            "Median of 'adj_close': 45.38\n",
            "Mode of 'adj_close': [30.950001]\n",
            "\n",
            "Number of potential outliers in 'adj_close' using IQR method: 3333\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     stock_symbol       date   open   high    low  close  adj_close  \\\n",
              "5388         ADBE 2018-06-01 250.55 251.83 248.85 251.31     251.31   \n",
              "5389         ADBE 2018-06-04 252.85 254.72 251.10 253.34     253.34   \n",
              "5390         ADBE 2018-06-05 254.00 254.06 251.11 252.70     252.70   \n",
              "5391         ADBE 2018-06-06 253.75 254.07 251.50 253.95     253.95   \n",
              "5393         ADBE 2018-06-08 246.86 251.66 245.83 251.21     251.21   \n",
              "\n",
              "         volume  volume_zscore     company  \n",
              "5388 2773200.00           0.54  Adobe Inc.  \n",
              "5389 3058700.00           0.54  Adobe Inc.  \n",
              "5390 2677400.00           0.54  Adobe Inc.  \n",
              "5391 3963600.00           0.53  Adobe Inc.  \n",
              "5393 2880600.00           0.54  Adobe Inc.  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5cf1c1ab-2b37-482c-baac-96ea190179a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "      <th>volume_zscore</th>\n",
              "      <th>company</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5388</th>\n",
              "      <td>ADBE</td>\n",
              "      <td>2018-06-01</td>\n",
              "      <td>250.55</td>\n",
              "      <td>251.83</td>\n",
              "      <td>248.85</td>\n",
              "      <td>251.31</td>\n",
              "      <td>251.31</td>\n",
              "      <td>2773200.00</td>\n",
              "      <td>0.54</td>\n",
              "      <td>Adobe Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5389</th>\n",
              "      <td>ADBE</td>\n",
              "      <td>2018-06-04</td>\n",
              "      <td>252.85</td>\n",
              "      <td>254.72</td>\n",
              "      <td>251.10</td>\n",
              "      <td>253.34</td>\n",
              "      <td>253.34</td>\n",
              "      <td>3058700.00</td>\n",
              "      <td>0.54</td>\n",
              "      <td>Adobe Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5390</th>\n",
              "      <td>ADBE</td>\n",
              "      <td>2018-06-05</td>\n",
              "      <td>254.00</td>\n",
              "      <td>254.06</td>\n",
              "      <td>251.11</td>\n",
              "      <td>252.70</td>\n",
              "      <td>252.70</td>\n",
              "      <td>2677400.00</td>\n",
              "      <td>0.54</td>\n",
              "      <td>Adobe Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5391</th>\n",
              "      <td>ADBE</td>\n",
              "      <td>2018-06-06</td>\n",
              "      <td>253.75</td>\n",
              "      <td>254.07</td>\n",
              "      <td>251.50</td>\n",
              "      <td>253.95</td>\n",
              "      <td>253.95</td>\n",
              "      <td>3963600.00</td>\n",
              "      <td>0.53</td>\n",
              "      <td>Adobe Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5393</th>\n",
              "      <td>ADBE</td>\n",
              "      <td>2018-06-08</td>\n",
              "      <td>246.86</td>\n",
              "      <td>251.66</td>\n",
              "      <td>245.83</td>\n",
              "      <td>251.21</td>\n",
              "      <td>251.21</td>\n",
              "      <td>2880600.00</td>\n",
              "      <td>0.54</td>\n",
              "      <td>Adobe Inc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5cf1c1ab-2b37-482c-baac-96ea190179a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5cf1c1ab-2b37-482c-baac-96ea190179a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5cf1c1ab-2b37-482c-baac-96ea190179a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4c44bb87-4fc0-4a45-a6a7-055e8c649d52\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c44bb87-4fc0-4a45-a6a7-055e8c649d52')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4c44bb87-4fc0-4a45-a6a7-055e8c649d52 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(outliers_adj_close\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"ADBE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2018-06-01 00:00:00\",\n        \"max\": \"2018-06-08 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2018-06-04 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9797264631181295,\n        \"min\": 246.860001,\n        \"max\": 254.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          252.850006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4170631909026878,\n        \"min\": 251.660004,\n        \"max\": 254.720001,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          254.720001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3919173585239095,\n        \"min\": 245.830002,\n        \"max\": 251.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          251.100006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.21739990349125,\n        \"min\": 251.210007,\n        \"max\": 253.949997,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          253.339996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.21739990349125,\n        \"min\": 251.210007,\n        \"max\": 253.949997,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          253.339996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 518831.2731514938,\n        \"min\": 2677400.0,\n        \"max\": 3963600.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3058700.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume_zscore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.005564097295595121,\n        \"min\": 0.5256460643794943,\n        \"max\": 0.53943964682514,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5353504748561424\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Adobe Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Select the column to analyze\n",
        "variable = df_completo['adj_close']\n",
        "\n",
        "# Calculate Mean, Median, and Mode\n",
        "media = variable.mean()\n",
        "mediana = variable.median()\n",
        "moda = variable.mode()[0] # .mode() can return multiple values, we take the first one\n",
        "\n",
        "print(f\"--- Medidas de Tendencia Central para 'adj_close' ---\")\n",
        "print(f\"Media (Promedio): {media:.2f}\")\n",
        "print(f\"Mediana (Valor central): {mediana:.2f}\")\n",
        "print(f\"Moda (Valor m√°s frecuente): {moda:.2f}\")\n",
        "\n",
        "# Identify potential skew due to outliers by comparing mean and median\n",
        "if media > mediana:\n",
        "    print(\"\\nLa media es mayor que la mediana, lo que sugiere un sesgo positivo (outliers con valores altos).\")\n",
        "else:\n",
        "    print(\"\\nLa mediana es mayor que la media, lo que sugiere un sesgo negativo (outliers con valores bajos).\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GQtssKAJClfu",
        "outputId": "776f4981-73ad-48ca-a30c-1ead164fac77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Medidas de Tendencia Central para 'adj_close' ---\n",
            "Media (Promedio): 85.21\n",
            "Mediana (Valor central): 45.38\n",
            "Moda (Valor m√°s frecuente): 30.95\n",
            "\n",
            "La media es mayor que la mediana, lo que sugiere un sesgo positivo (outliers con valores altos).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set the style for the plots\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Create a figure with two subplots\n",
        "fig, axes = plt.subplots(1, 2, figsize=(16, 6))\n",
        "\n",
        "# Histogram\n",
        "sns.histplot(df_completo['adj_close'], bins=50, kde=False, ax=axes[0], color='skyblue')\n",
        "axes[0].set_title('Histogram of Adjusted Closing Prices')\n",
        "axes[0].set_xlabel('Adjusted Close Price')\n",
        "axes[0].set_ylabel('Frequency')\n",
        "\n",
        "# Density Plot\n",
        "sns.kdeplot(df_completo['adj_close'], ax=axes[1], fill=True, color='salmon')\n",
        "axes[1].set_title('Density Plot of Adjusted Closing Prices')\n",
        "axes[1].set_xlabel('Adjusted Close Price')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "yQwyZnHVGZwJ",
        "outputId": "e25c2e9a-3177-4a97-ac11-60e28334afce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 2 Axes>"
            ],
            "image/png": "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juO2bdumO++8UzExMbrzzjv1ySef5Dju8rzmNgdwTmta7Ny5U3379lXTpk3VuHFjderUSS+//LKkrKmf7rnnHknS5MmTc7zG77//XkOGDNHNN9+shg0bql+/fvr222+znfubb75Rr169FBMTo/bt2+vtt9++Spb+37x581SmTBnNnDkzxxvL1q1b67bbbrviMeLi4nT//ferUaNGatq0qYYPH67ffvvNZUxKSopmzJihdu3aqX79+mrRooUGDRqkgwcPOsdcnlvHmh5Lly7VO++843y99OrVS/v3788Wx5YtW9SlSxeX5/Ra5mwODQ1Vw4YNlZqaqnPnzknKej08++yz+uCDD9S1a1fFxMRo+/btzscun6/6zJkzeuKJJxQbG+t8rT/99NMur/Xk5GTNmDHD+Xe/Q4cO+ve//y273e5yrA8//FA9e/ZU48aN1aRJE911111asWJFga4NAAB4TosWLTRixAidPHlSH3zwgctjv/32mx599FHdcsstiomJUc+ePfXpp5+6jHGsL/Dtt99q1qxZuvXWW9WoUSONHDnS+R7F4cCBAxoyZIiaN2+uBg0aqF27di5TZEmu71kWLFigOXPmSJJuv/1253vSEydOqF+/frr77rtzvKZOnTppyJAh+c5FTu+vcpKXe6M6deooNTVVGzZscMZ9tXUSEhMT9cQTT6hly5aKiYnR3XffrQ0bNjgfd6xXcOLECX3xxRcu+biS9PR0ffLJJ+rSpYs6d+6s9PT0bM+jJBmGoVdffVVt2rRRw4YN1b9/f/3666/ZxuW0bkJu60DktKbFqlWr1LVrVzVs2FDNmjVTz549nfdFV3rOHd5//3317NlTDRo00C233KJx48bp9OnT2c7teI/eoEED3XPPPfrmm2+umCeHP//8U++8845atWqVraghSQEBARoyZMhVuzXWrFmjrl27qn79+oqNjdW0adOUnJzsMubYsWMaPXq0WrVqpZiYGLVp00bjxo3TxYsXnWMuz21+/s7Z7XYtWLBAsbGxzuf08OHD17RuR506dVS2bFnnc+J4PXz44Yd65ZVX1Lp1azVs2FApKSm5rrHx/fff66GHHlKzZs3UqFGjHO8d8vLvz9U+5wCQP3RsACg0KSkpOb7BzsjIuOq+Cxcu1BtvvKF7771XDRo0UEpKin744QcdPHhQrVq1Up8+fXT27Fnt3LnT+UbSwTAMDR8+3Plhd926dbV9+3bNmTPH+cGow6RJk7RlyxZ169ZNDRs21Ndff62HH34417jGjBmj66+/XuPGjXPeCOzatUvHjx9Xz549VaFCBf36669at26dDh8+rHXr1mVrwx03bpxq1aql8ePH68svv9Rrr72mMmXK6O2339att96qCRMmaNOmTXr++ecVExOjZs2aXTFXU6ZM0YYNG9SpUycNGjRI+/fv1xtvvKHffvtNixYtkpT1DZ5169Zp//79mj59uiSpSZMmVzzumTNntGfPHs2ePVuS1LVrV61YsUJPPfWUy7dwduzYodGjR6t27doaP368zp8/r8mTJ7u1zfnXX3/VsGHDVKdOHT366KMKDg7W77//ru+++06SVKtWLT366KOaP3+++vTpo5tvvtnlGuPi4vTQQw+pfv36GjVqlEwmk9avX6+BAwfqrbfeUoMGDSRJhw4d0pAhQ1SuXDmNHj1amZmZWrBggSIjI68a47Fjx3TkyBH16tWrwHM+79q1Sw899JCqVq2qUaNGKT09XatXr1bfvn21fv16Va1aVZL09NNP66OPPlK/fv1Uq1YtXbhwQd9++61+++031atX74rn+O9//6tLly6pT58+MplMWrJkiUaPHq1t27Y5izFffPGFxo0bp6ioKI0fP15JSUl68sknValSpQJdl8OJEycUEBDg0qK/e/dubdmyRQ888IDKli2rKlWq5LjvmTNndM899+jixYvq3bu3brjhBp05c0YfffSR0tPTFRwcrLS0NPXr109nzpzRfffdp3/84x/au3evXn75ZcXHx+vJJ5+UlFUke+yxx9SiRQvntA1HjhzRd999p4EDB17TNQIAgMLXrVs3vfzyy9qxY4d69+4tKev9Yt++fVWpUiU99NBDCgsL05YtWzRy5EgtWLBAHTp0cDnG9OnTVapUKY0aNUonT57UihUr9Oyzz2ru3LmSsj60HzJkiMqWLauHH35YpUqV0okTJ3L9Ao+U9c3wY8eO6b///a8mT57sXNOuXLly6tatm6ZMmaJffvlFUVFRzn3279+vY8eOafjw4QXKRU7vr/4ur/dGc+bM0ZQpU9SgQQNnTqtXr57redPT09W/f3/98ccfeuCBB1S1alVt3bpVkyZNUnJysgYOHKhatWppzpw5mjVrlq677joNGjTImY8r+eyzz5SamqquXbuqQoUKuuWWW7Rp06Zs07nOmzdPr732mtq2bau2bdvq4MGDGjx4cJ7uN/Nq3bp1mj59ujp16qQBAwbIYrHo0KFD+v7773XXXXdd8TmXpNdee03z5s1T586ddc899+jcuXNavXq1HnjgAW3cuNH5vP3nP//R1KlT1bhxYw0cOFDHjx/X8OHDVbp0af3jH/+4YoxfffWVMjMzcy2c5cWCBQu0cOFCtWzZUn379tXRo0e1du1aHThwQGvXrlVQUJCsVquGDBkiq9Wqfv36qXz58jpz5oy++OILJScnq2TJklc8x9X+zknSSy+9pCVLlui2225T69at9fPPP2vIkCGyWCwFvrakpCQlJyfr+uuvd9n+6quvKigoyHlNuXU87dy5U8OGDVPFihU1YMAAlS9fXr/99pu++OIL571DXv/9udrnHADyyQAAN3vvvfeMqKioK/7XtWtXl31uu+024/HHH3f+fvfddxsPP/zwFc8zbdo0IyoqKtv2Tz75xIiKijJeffVVl+2jR4826tSpY/z++++GYRjGDz/8YERFRRkzZsxwGTdp0iQjKirKmD9/vnPb/PnzjaioKOOxxx7Ldr60tLRs2/773/8aUVFRxtdff53tGE899ZRzW2ZmptGmTRujTp06xhtvvOHcnpSUZDRo0MAlJzn56aefjKioKOPJJ5902T579mwjKirKiIuLc257/PHHjUaNGl3xeH+3dOlSo0GDBsbFixcNwzCMo0ePGlFRUcYnn3ziMq5bt25Gq1atjOTkZOe2HTt2GFFRUcZtt93mMvbyvD7++OPZxhjG/+fKYfny5UZUVJSRmJiYa7z79+83oqKijPfee89lu91uNzp27GgMHjzYsNvtzu1paWlGu3btjEGDBjm3jRgxwoiJiTFOnjzp3Hb48GGjbt26Ob7W/m7btm1GVFSUsXz58iuOczh+/Hi2eLt162a0aNHCOH/+vHPbTz/9ZERHRxsTJ050brv55puNadOmXfH4l+fWcb5bbrnFuHDhQra4P/vsM+e2O++802jTpo2RkpLi3LZnz54cn9Oc9OvXz7jjjjuMxMREIzEx0Th8+LDx3HPPGVFRUcawYcOc46Kioozo6Gjj119/zXaMy18rEydONKKjo439+/dnG+t4XhctWmQ0atTIOHr0qMvjL774olG3bl3j1KlThmEYxvTp040mTZoYmZmZV70WAADgeY77iZz+v+9w8803G927d3f+PnDgQOPOO+80LBaLc5vdbjf69OljdOzYMduxH3zwQZf3hjNnzjTq1q3rfE/ruKe4UgyGkf09y5IlS4yoqCjj+PHjLuOSk5ONmJgY44UXXnDZ/txzzxmNGjUyLl26dMXz5PX91eXvAfN6b2QYhtGoUaOr3n84vPnmm0ZUVJTx/vvvO7dZrVajT58+RqNGjZz3EIaRda93tXu7vxs2bJhx3333OX9/5513jJtuusnlXiAxMdGoV6+e8fDDD7s8jy+//LIRFRXlch27d+82oqKijN27d7vElNO19uvXz+jXr5/z9+HDh2e7d71cbs/5iRMnjLp16xqvvfaay/ZDhw4ZN910k3O71Wo1WrRoYXTr1s3l9fvOO+8YUVFRLvHkZObMmUZUVJTx448/XnGcg+PvgCNeRy4HDx5s2Gw257jVq1cbUVFRxrvvvmsYhmH8+OOPRlRUlLFly5YrHv/y3Ob171x8fLxx0003GSNGjHA53oIFC7I9p7mJiooynnjiCeffk++//94YOHCgERUVZSxbtswwjP9/Pdx+++3Z7uUvf61kZmYa7dq1M2677TYjKSnJZezfryWv//7k5XMOAHnHVFQACs3UqVO1fPnybP9dPsVQTkqVKqVff/1Vx44dy/d5v/rqKwUEBGRrIR48eLAMw9BXX30lSc4pbxxTSjn069cv12Pfd9992bb9fV5fi8Wic+fOqWHDhpLkMjWQg2PKJCmrLbh+/foyDMNle6lSpVSzZk0dP34811ikrAXUJTm//eQwePBgl8cLwrFIn6P7oEaNGqpXr55Ly//Zs2f1008/qUePHi7f0GnVqlW+59G9Esc3mT799NNsUwpdzU8//aRjx47prrvu0vnz53Xu3DmdO3dOqampatGihb7++mvZ7XbZbDbt2LFD7du3V+XKlZ3716pVS7GxsVc9T0pKiiQpPDw8X/E5/D2XZcqUcW6Pjo5Wy5YtXZ7LUqVK6fvvv9eZM2fyfZ4uXbqodOnSzt+bNm0qSc7X2pkzZ/TLL7+oe/fuLtdyyy23uHy78GqOHDmiFi1aqEWLFurSpYtWr16tf/7zn5o5c6bLuGbNml31tWK327Vt2zbddtttLvNsOzi6orZu3aqbb75ZpUqVcj7P586dU8uWLWWz2fT1119LyspfWloaLd8AAPixsLAwXbp0SZJ04cIF7d69W507d3Z2jZ87d07nz59XbGysjh07lu19U+/evV06q5s2bSqbzaaTJ09KkvO97RdffOGWDoCSJUvq9ttv14cffujs/LbZbNqyZYtuv/32PK0fkdf3V3+X13uj/Prqq69UoUIF3Xnnnc5tQUFB6t+/v1JTU53vu/Lr/Pnz2rFjh8txO3bsKJPJpC1btji37dq1SxkZGerXr5/L8+ju7ttSpUrpzz//zHHq1qv55JNPZLfb1blzZ5f3puXLl9f111/vnO7ohx9+UGJiou677z6XzvjL77Fyc633IY5cDhgwQGbz/39MeO+99yoiIsJ5H+K4L9yxY4fS0tLyfZ6r/Z2Li4tTZmZmvu7Pc/Luu+86/57ce++9+u677zRo0KBsr43u3btfdY2eH3/8USdOnNCAAQOydUU5riU///5cy+ccALJjKioAhaZBgwY5fghZunTpbOtPXO7RRx/ViBEj1KlTJ0VFRSk2NlbdunVTdHT0Vc978uRJVaxYMdt0QLVq1XI+LkmnTp2S2Wx2Tu/jcHmL6t9dPlbKeiOzcOFCbd68WYmJiS6P/X2uUYe/f2guZd3klChRIltLdsmSJXXhwoVcY3Fci9lsztYmXqFCBZUqVcp5rfn122+/6ccff1S3bt30+++/O7c3b95ca9asUUpKiiIiInTq1ClJOeesZs2a+vHHHwt0/st16dJF//nPfzRlyhS99NJLatGihTp06KA77rjD5c13ThxvGh9//PFcx1y8eFFWq1Xp6em5XsvVikSO15vjBju/HLmsWbNmtsdq1aqlHTt2OBdNnDBhgiZNmqR//vOfqlevntq2bavu3burWrVqVz3P5a3sjiKHY/5cRxw5TT1w/fXX5/k5rVKliqZPny6TyaTg4GDVqFEjxym9cvo7dblz584pJSVFN9544xXH/f777zp06JBatGiR63GkrGLmli1b9NBDD6lSpUpq1aqVOnfurDZt2uThygAAgC9ITU11vrf4448/ZBiG5s2bp3nz5uU4PjEx0WVazcvfkzs+tHS8J7rlllvUqVMnLVy4UG+++aZuueUWtW/fXnfddVeBF0fu3r27Nm/erG+++UbNmjXTrl27lJCQ4LLQ8ZXk9f3V3+X13ii/Tp48qeuvvz7be3HHcR3vKfNr8+bNysjIUN26dV3uQxo0aKBNmzbpgQcecDl+jRo1XPYvV66cy5d4rtVDDz2kXbt26d5779X111+vVq1a6c4773ROfXslx44dk2EY6tixY46PBwZmfSSX2z1VUFBQnt7fu+s+5IYbbnDZHhwcrGrVqjlfI9WqVdOgQYO0fPlybdq0SU2bNlW7du10991356kAc7W/c7ndh5QpUyZfz+ntt9/uLHiFh4erdu3aORYO83If4vjy15W+4JWff3+u5XMOANlR2ADgk5o1a6ZPPvlEn376qXbu3Kl3331XK1as0LRp03Tvvfd6La4SJUpk2zZ27Fjt3btXQ4YMUd26dRUWFia73a6hQ4dmW6xcUo4fxAcEBOR4vpz2z8nl63hcK0dXxqxZszRr1qxsj3/00Ufq1avXNZ8nt7htNpvL7yEhIVqzZo327NmjL774Qtu3b9fmzZv1zjvvaNmyZbnmT/r/HE6cOFF169bNcUxYWJjLAtQF4bgR+OWXX67pOHnRpUsXNW3aVJ988ol27typpUuXavHixVqwYIHatm17xX2v9bWWV2FhYWrZsuVVx13tW1L5Ybfb1apVKw0dOjTHxx03vpGRkdq4caN27Nihr776Sl999ZXWr1+v7t276/nnn3dbPAAAoHD8+eefunjxovMDUEdH7+DBg9W6desc97n8w9LcvhzjeE9kMpk0f/587du3T59//rm2b9+uJ554QsuXL9c777xToG/Hx8bGqnz58vrggw/UrFkzffDBB6pQoUKe3jNJeX9/5c8ci3L37ds3x8ePHz+epw/7C8pms7m8X65Vq5a2bt3qvAf5+OOP9dZbb2nkyJF69NFHr3gsu90uk8mkxYsX5/gePC9dOnnhuA85dOhQrvc77jJp0iT16NHDeZ8+ffp0vfHGG1q3bt1V11i82t85d7nuuus8eh+Sn39/fPVzDsBfUdgA4LPKlCmjXr16qVevXrp06ZL69eunBQsWOP+Hn9uH4lWqVFFcXJyzq8DhyJEjzselrG+M2O12nThxwuWbPn//ZtDVJCUlKS4uTqNHj9aoUaOc2z3VWlqlShXZ7Xb9/vvvzm9HSVJCQoKSk5NzXYj5SgzD0KZNm9S8efNsbcBS1iJrmzZtUq9evZzfuskpZ0ePHr3quUqVKuX8hs7f5fQNL7PZ7Gwpnjx5sl5//XW98sor2rNnj1q2bJnr68Fx4xMREXHFN7jlypVTSEhIga+lZs2aqlmzpj799FNdunQp3ze7jlzmdK4jR46obNmyLjc/FStW1AMPPKAHHnhAiYmJ6tGjh15//fWrFjbyGscff/yR7bH8/N1wp3LlyikiIkK//vrrFcdVr15dqampebqRCQ4OVrt27dSuXTvZ7XY988wzeueddzRixIgrdm0BAADve//99yXJOV2o4/1eUFCQ2z/4b9SokRo1aqRx48Zp06ZNmjBhgjZv3pzrh5BX+sJRQECA7rzzTm3YsEETJkzQtm3b1Lt37yt+Seda5fXeqCDHPXTokOx2u8sH1o7jXv7t/Lw4fvy49u7dq379+qlZs2Yuj9ntdk2cOFGbNm3SiBEjnMc/duyYS6Hj3LlzSkpKuuq5Spcunet9yOWFk7CwMHXp0kVdunSR1WrV6NGj9frrr2vYsGEqUaJErs959erVZRiGqlatmmNXtsPf76n+3nmckZGhEydOXPXb/G3atFFAQIA2bdqk7t27X3Hslc5/5MgRl2u3Wq06ceJEtr9TderUUZ06dTRixAh999136tu3r9auXatx48bl+9w5xfHHH3+4xHH+/Pk8PaeFwRHHL7/8kuu/Lfn99+dqn3MAyDvW2ADgky6fqio8PFzVq1d3+VZ9aGioJGV7Q9qmTRvZbDatWbPGZfubb74pk8nknG7GcSP01ltvuYxbvXp1nuPM7SZkxYoVeT7GtXB8iH35+ZYvX+7yeH58++23OnnypHr27Kk77rgj239dunTRnj17dObMGVWsWFF169bVhg0bXKbd2rlzpw4fPnzVc1WvXl0XL17Uzz//7Nx29uxZffLJJy7jcpqSy/FtJMdrIrfXQ/369VW9enUtW7Ysx/Zsx/REAQEBio2N1bZt21wKK7/99pt27Nhx1WuRsqZQu3DhgqZMmaLMzMxsj+/YsUOff/55jvs6crlx40aXa/jll1+0c+dO53Nps9myTXEWGRmpihUrXnPXiSRVqlRJUVFR2rhxo0u+/ve//3mkGyUnZrNZ7du31+eff64DBw5ke9zxLa/OnTtr7969zvVz/i45Odn5nFz+74vZbHau/eOOHAIAgMITFxenV199VVWrVtXdd98tKeu90C233KJ33nlHZ8+ezbaP4/1efiQlJWX7Jvnl7z9z4nhPmtOUtJLUrVs3JSUlaerUqUpNTXVeQ2HJ672RlPUBfk4f9ud23Pj4eG3evNm5LTMzU6tWrVJYWFi2wkReOLo1hg4dmuM9yC233OIc07JlSwUFBWn16tUuz1Ne78OqVaum77//3uW5/Pzzz3X69GmXcZe/bwwODlatWrVkGIZz7ZXcnvOOHTsqICBACxcuzPZaMgzDeez69eurXLlyevvtt13i2bBhQ56ej3/84x+69957tWPHDq1atSrb43a7XcuWLdOff/6Z4/6OXK5atcolznfffVcXL1503oekpKRku8eJioqS2Wx2y3voFi1aKDAwUGvXrnXZfvlr15Pq1aunqlWrauXKldmeC0eu8vPvT14+5wCQd3RsAPBJXbt21S233KJ69eqpTJkyOnDggD766COXhcPq1asnSZo+fbpiY2MVEBCgrl27ql27dmrevLleeeUVnTx5UnXq1NHOnTv16aefauDAgc420Pr166tTp05asWKFLly4oIYNG+rrr792dlvkZXqniIgINWvWTEuWLFFGRoYqVaqknTt36sSJE+5PSg6io6PVo0cPvfPOO0pOTlazZs104MABbdiwQe3bt9ett96a72Nu2rRJAQEB+uc//5nj4+3atdMrr7yizZs3a9CgQXrsscc0bNgw3X///erVq5cuXLig1atX68Ybb1RqauoVz9WlSxe9+OKLGjVqlPr376/09HStXbtWNWvWdFl4fdGiRfrmm2/Utm1bValSRYmJiXrrrbd03XXXOee3rV69ukqVKqW3335b4eHhCgsLU4MGDVStWjVNnz5dDz30kO6880717NlTlSpV0pkzZ7Rnzx5FRETo9ddflySNHj1a27dv1wMPPKC+ffvKZrNp9erVql27tg4dOnTV3HXp0kWHDh3S66+/rh9//FF33nmnKleurAsXLmj79u2Ki4vTSy+9lOv+EydO1EMPPaQ+ffronnvuUXp6ulavXq2SJUs6O4IuXbqktm3bqlOnToqOjlZYWJh27dqlAwcOaNKkSVeNMS/GjRunESNGqG/fvurZs6eSk5O1Zs0aRUVFFXju3mv12GOPaefOnerfv7969+6tWrVqKT4+Xlu3btVbb72lUqVKaciQIfrss8/0yCOPqEePHqpXr57S0tL0yy+/6KOPPtKnn36qcuXKacqUKUpKStKtt96qSpUq6dSpU1q9erXq1q3r0vkEAAC866uvvtKRI0dks9mUkJCgPXv2aOfOnapcubJee+01l2lin376ad1///26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58W5c+dcjpuZmamkpCTn/uXLl3d2eDg4fnd0buRFTEyMAgIC8nmV185ms+nAgQMFPn9EREQ+CxtSo0aN8n2eouRac46CIe+eR869g7x7B3n3PHLuHYWdd8fxfdGaNWu0dOlSxcfHKzo6Wk899ZQaNGiQ6/gtW7Zo3rx5OnnypGrUqKEJEyaobdu2zsc//vhjvf322zp48KAuXLigjRs3qm7dui7HsFgsmj17tjZv3iyr1arY2Fg9/fTT+brPwJUZqamSySS5oRBhCg3PujdKSZbKRl5tOAAAAHyUVwsb6enpMplMLtscUydJUtWqVVWhQgXFxcU5byBSUlL0/fffq2/fvpKy1ulITk7WDz/8oPr160uSdu/eLbvd7ryJadSokebOnauMjAwF/fVmeNeuXapZs2aep6FyxObNm/KCnv/yHF9x7N/OBe8/58UVefc8cu4d5N07yLvnkXPvKG5537x5s2bNmqVp06apYcOGWrFihYYMGaKtW7dmm9pWkr777juNHz9ejz32mG677TZt2rRJI0eO1Pr16xUVFSVJSk1NVZMmTdS5c2dNmTIlx/POnDlTX375pebOnauSJUvqueee06hRo/T2228X6vUWK2mpUomQfN3X5CosTJJkXEySicIGAACA3/Lq4uG33XabXn/9dX3xxRc6ceKEPvnkEy1fvlzt27eXlPWB/IABA/Taa6/p008/1aFDhzRx4kRVrFjROaZWrVpq3bq1nnrqKe3fv1/ffvutnnvuOXXt2lWVKlWSJN11110KCgrSk08+qV9//VWbN2/WypUrNWjQIK9dOwAAAAD3Wb58uXr37q1evXqpdu3amjZtmkJCQvTee+/lOH7lypVq3bq1hg4dqlq1amns2LG66aabtHr1aueY7t27a9SoUWrRokWOx7h48aLee+89TZo0SS1atFD9+vU1c+ZM7d27l6ld3emvwoZbhIVn/bx40T3HAwAAgFd4tWNjypQpmjdvnqZNm+acbqpPnz4aOXKkc8xDDz2ktLQ0TZ06VcnJybr55pu1ZMkSlSjx/wvHvfjii3ruuec0cOBAmc1mdezY0eUbVSVLltTSpUv17LPPqmfPnipbtqxGjBihPn36ePR6AQAAALif1WrVwYMHNWzYMOc2s9msli1bau/evTnus2/fPj344IMu22JjY7Vt27Y8n/eHH35QRkaGWrZs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7du3Ky0tTddff71mzpypmJgYSZJhGJo/f77+85//KDk5WU2aNNEzzzyjGjVqOI9x4cIFPffcc/r8889lNpvVsWNHPfnkkwoPD3eO+fnnn/Xss8/qwIEDKleunPr166eHHnrI05fr80ySAvKxSLlJ0n0sUA4AAADgWlkskiSTt9fYMAdIJUJksMYGAACAz/Jqx0ZSUpL69u2roKAgLV68WB9++KEef/xxlS79/x+UL168WKtWrdIzzzyjdevWKTQ0VEOGDJHlrze9kjRhwgQdPnxYy5cv1+uvv65vvvlGU6dOdT6ekpKiIUOGqHLlylq/fr0mTpyohQsX6p133vHo9foTFigHAAAA4FHWv+7xvN2xIWVNR5XCGhsAAAC+yqsdG4sXL9Z1112nWbNmObdVq1bN+WfDMLRy5UoNHz5c7du3lyTNmTNHLVu21LZt29S1a1f99ttv2r59u959911nl8eUKVP08MMPa+LEiapUqZI++OADZWRkaObMmQoODtaNN96on376ScuXL1efPn08e9EAAAAAgOx8qrARKuNSsrejAAAAQC68Wtj47LPPFBsbq0cffVRff/21KlWqpPvvv1+9e/eWJJ04cULx8fFq2bKlc5+SJUuqYcOG2rt3r7p27aq9e/eqVKlSzqKGJLVs2VJms1n79+9Xhw4dtG/fPjVt2lTBwcHOMbGxsVq8eLGSkpJcOkSuxGazuenK8+fv5zUMI89dEo5xhb2P5L3cFBbH9RS16/J15N3zyLl3kHfvIO+eR869o7DzzvOJwmI4uvK9PBWVJJlCQmWwxgYAAIDP8mph4/jx41q7dq0GDRqkRx55RAcOHND06dMVFBSkHj16KD4+XpIUGRnpsl9kZKQSEhIkSQkJCSpXrpzL44GBgSpdurRz/4SEBFWtWtVlTPny5Z2P5bWwceDAgfxfpJulpKTkueCQNc9YmULdx/TX+H379uXxDP7FF57z4oi8ex459w7y7h3k3fPIuXeQd/gdZ8dG8JXHeUJImHT2tLejAAAAQC68WtgwDEP169fXY489Jkm66aab9Ouvv+rtt99Wjx49vBlajmJiYhQQEODx89psNueNaURERD6LFIW7j+mvn40aNcrjGfyDI+fees6LK/LueeTcO8i7d5B3zyPn3lHYef/7e1PAray+07Gh0DDpEmtsAAAA+CqvFjYqVKigWrVq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9DUAAACAgOr0NepObySMYmJi1KtXLy1cuDC48J/rulq4cKGuvfba4x7vOI5iYmLCXSYAAACAGqjJ+/3+/ftr0aJFldbZWLBggfr37y9JatOmjdLT07Vw4UL16BEYip+fn69ly5bp6quvliQNGDBA+/bt08qVK9W7d29J0qJFi+S6rvr2rdoICPoaAAAAQPU5XhdQW2688UZNmzZN7733ntavX6+xY8eqqKhIl156qdelAQAAADhBx3u/P3r0aE2cODG4//XXX6958+bplVde0fr16/Xss89q5cqVwSDEGKPrr79ezz//vD777DOtWbNGo0ePVrNmzYLhSefOnTV8+HA9+OCDWr58ub7++ms9/PDDGjFihJo3b177jQAAAAA0EA1ixIYkXXDBBcrLy9OkSZOUnZ2tHj16aPLkyVWaigoAAABA3Xa89/s7duyQ4/z0ua7MzExNmDBBTz/9tJ566il16NBBzz33nDIyMoL7/PKXv1RRUZEeeugh7du3TwMHDtTkyZMVGxsb3GfChAl6+OGHdcMNN8hxHJ1zzjn6/e9/X3sXDgAAADRAxlZliXEAAAAAAAAAAIA6oMFMRQUAAAAAAAAAACIfwQYAAAAAAAAAAIgYBBsAAAAAAAAAACBiEGwAAAAAAAAAAICIQbBRx7311ls644wz1KdPH11++eVavny51yVFtH//+9+67bbbNGzYMHXr1k2zZ8+utN1aq2eeeUbDhg1T3759NWrUKG3atKnSPnv27NE999yjzMxMDRo0SA888IAKCgpq8SoiywsvvKCRI0dqwIABGjp0qH79619rw4YNlfYpKSnRuHHjNHjwYA0YMEC/+c1vlJOTU2mf7du365ZbblG/fv00dOhQ/eEPf1B5eXltXkrEePvtt3XRRRcpMzNTmZmZuvLKKzV37tzgdtq7drz44ovq1q2bHn300eBjtH3oPfvss+rWrVul23nnnRfcTpuHx86dO3Xvvfdq8ODB6tu3ry666CKtWLEiuJ2fp6F3xhlnHPa93q1bN40bN04S3+uILPRxqo7+S2jRNwk9+h7hR7/ixNFnCA/6BKHF+/0asKizPv74Y9urVy87ffp0u27dOvv73//eDho0yObk5HhdWsSaM2eOfeqpp+w//vEPm5GRYT/99NNK21944QU7cOBA++mnn9rvvvvO3nbbbfaMM86wxcXFwX1uuukme/HFF9ulS5faf//73/bss8+2d999d21fSsT4xS9+YWfMmGHXrl1rv/vuO/vLX/7SnnbaabagoCC4z0MPPWRPPfVUu2DBArtixQp7xRVX2CuvvDK4vby83F544YV21KhR9ttvv7Vz5syxgwcPthMnTvTikuq8zz77zM6ZM8du3LjRbtiwwT711FO2V69edu3atdZa2rs2LFu2zJ5++un2oosuso888kjwcdo+9CZNmmRHjBhhd+3aFbzl5uYGt9Pmobdnzx57+umn2/vuu88uW7bMbtmyxc6bN89u3rw5uA8/T0MvNze30vf5F198YTMyMuyiRYustXyvI3LQx6ke+i+hRd8k9Oh7hBf9itCgzxB69AlCj/f71UewUYdddtlldty4ccGv/X6/HTZsmH3hhRc8rKr+OLRj4LquPfnkk+3kyZODj+3bt8/27t3bfvTRR9Zaa7///nubkZFhly9fHtxn7ty5tlu3bvbHH3+sveIjWG5urs3IyLCLFy+21gbauFevXnbWrFnBfQ6085IlS6y1gQ5d9+7dbXZ2dnCft99+22ZmZtqSkpJarT9SnXTSSXbatGm0dy3Iz8+355xzjv3iiy/stddeG+yA0PbhMWnSJHvxxRcfcRttHh5//OMf7dVXX33U7fw8rR2PPPKIPeuss6zrunyvI6LQx6k5+i+hR98kPOh7hAb9itChzxB69AnCj/f7x8dUVHVUaWmpVq1apaysrOBjjuMoKytLS5Ys8bCy+mvbtm3Kzs6u1ObJycnq169fsM2XLFmilJQU9enTJ7hPVlaWHMdhCH0V7d+/X5KUmpoqSVq5cqXKysoqtXvnzp3VqlUrLV26VJK0dOlSZWRkKC0tLbjPsGHDlJ+fr++//772io9Afr9fH3/8sQoLCzVgwADauxaMHz9ep556aqU2lvheD6fNmzdr2LBhOvPMM3XPPfdo+/btkmjzcPn888/Vu3dv3XHHHRo6dKh+/vOfa9q0acHt/DwNv9LSUn3wwQcaOXKkjDF8ryNi0McJLf6/PXH0TUKLvkdo0a8ILfoMoUWfILx4v181UV4XgCPbvXu3/H6/mjZtWunxpk2bHjYHKEIjOztbko7Y5gfmrMvJyVGTJk0qbY+KilJqamrweByd67p67LHHlJmZqYyMDEmBNo2OjlZKSkqlfZs2bRps05ycnEr/MUsKfk27H9maNWt01VVXqaSkRAkJCXruuefUpUsXfffdd7R3GH388cf69ttvNX369MO28b0eHn379tXjjz+ujh07Kjs7W88995yuueYaffjhh7R5mGzdulXvvPOObrzxRt12221asWKFHnnkEUVHR+uSSy7h52ktmD17tvbv369LLrlEEv+/IHLQxwkt/r89MfRNQoe+R+jRrwgt+gyhR58gvHi/XzUEGwBqzbhx47Ru3Tq9/fbbXpdS73Xs2FHvv/++9u/fr7///e8aM2aM3nzzTa/Lqtd27NihRx99VK+88opiY2O9LqfBOPXUU4N/7969u/r166fTTz9ds2bNUlxcnIeV1V/WWvXu3Vt33323JKlnz55at26dpk6dGnzjjfCaMWOGTjnlFDVv3tzrUgAgYtE3CR36HqFFvyL06DOEHn2C8OL9ftUwFVUd1bhxY/l8PuXm5lZ6PDc397D0DaGRnp4uScds87S0NOXl5VXaXl5err179waPx5GNHz9ec+bM0euvv64WLVoEH09LS1NZWZn27dtXaf/c3Nxgm6alpQUT/QMOfE27H1lMTIzat2+v3r1765577lH37t01ZcoU2juMVq1apdzcXF166aXq2bOnevbsqcWLF+uNN95Qz549aftakpKSog4dOmjLli20eZikp6erc+fOlR7r1KlTcDg/P0/D64cfftCCBQt02WWXBR/jex2Rgj5OaPH/bc3RNwkt+h6hRb8i/OgznDj6BOHD+/2qI9ioo2JiYtSrVy8tXLgw+Jjrulq4cKEGDBjgYWX1V5s2bZSenl6pzfPz87Vs2bJgmw8YMED79u3TypUrg/ssWrRIruuqb9++tV5zJLDWavz48fr000/1+uuvq23btpW29+7dW9HR0ZXafcOGDdq+fbv69+8vSerfv7/Wrl1b6QfiggULlJSUpC5dutTKdUQ613VVWlpKe4fRkCFD9OGHH+r9998P3nr37q2LLroo+HfaPvwKCgq0detWpaen0+ZhkpmZqY0bN1Z6bNOmTWrdurUkfp6G27vvvqumTZvqtNNOCz7G9zoiBX2c0OL/2+qjb1I76HucGPoV4Uef4cTRJwgf3u9XHVNR1WE33nijxowZo969e6tv3756/fXXVVRUpEsvvdTr0iJWQUGBtmzZEvx627Zt+u6775SamqpWrVrp+uuv1/PPP6/27durTZs2euaZZ9SsWTOdddZZkgIL8wwfPlwPPvigxo0bp7KyMj388MMaMWIEw8OOYty4cfroo4/05z//WYmJicF5/ZKTkxUXF6fk5GSNHDlSTzzxhFJTU5WUlKRHHnlEAwYMCP7nPGzYMHXp0kWjR4/Wb3/7W2VnZ+vpp5/WNddco5iYGA+vrm6aOHGiTjnlFLVs2VIFBQX66KOPtHjxYr388su0dxglJSUF52c+ICEhQY0aNQo+TtuH3h/+8AedfvrpatWqlXbt2qVnn31WjuPowgsv5Ps9TG644QZdffXV+stf/qLzzz9fy5cv17Rp0zR+/HhJkjGGn6dh4rqu3n33Xf385z9XVNRPb+P5XkckoY9TPfRfQou+SejR9wg9+hWhR58h9OgThAfv96vJok5744037GmnnWZ79eplL7vsMrt06VKvS4poixYtshkZGYfdxowZY6211nVd+/TTT9usrCzbu3dve8MNN9gNGzZUeo7du3fbu+++2/bv399mZmba++67z+bn53txORHhSO2dkZFhZ8yYEdynuLjYjh071p500km2X79+9vbbb7e7du2q9Dzbtm2zN998s+3bt68dPHiwfeKJJ2xZWVltX05EuP/+++3pp59ue/XqZYcMGWJvuOEGO3/+/OB22rv2XHvttfaRRx4Jfk3bh95dd91lTz75ZNurVy87fPhwe9ddd9nNmzcHt9Pm4fH555/bCy+80Pbu3dued9559q9//Wul7fw8DY958+bZjIyMw9rSWr7XEVno41Qd/ZfQom8SevQ9agf9ihNDnyE86BOEHu/3q8dYa63X4QoAAAAAAAAAAEBVsMYGAAAAAAAAAACIGAQbAAAAAAAAAAAgYhBsAAAAAAAAAACAiEGwAQAAAAAAAAAAIgbBBgAAAAAAAAAAiBgEGwAAAAAAAAAAIGIQbAAAAAAAAAAAgIhBsAEAAAAAAAAAACIGwQYA1DPPPvus/uM//uOoX9cl1113nR599NE68zy1rS6/NgAAAMCh6GtEjrr82gBAKBBsAEAdt2TJEvXo0UO33HJLjY7/xS9+oddeey1k9dT2G/vS0lK99NJLuvjii9WvXz8NHjxYV111lWbMmKGysrJaq+NYvvzyS3Xr1i14y8rK0m9+8xtt3br1mMeF+rUBAAAAqoO+Bn0NAIhUUV4XAAA4tunTp+vaa6/V9OnTtXPnTjVv3rxaxycmJioxMTFM1YVXaWmpbrrpJq1Zs0Z33nmnMjMzlZSUpKVLl+qVV15Rz5491aNHD6/LDPrkk0+UmJiozZs368EHH9Rtt92mDz74QD6fr9J+1lr5/f6Ifm0AAAAQ+ehr0NcAgEjFiA0AqMMKCgo0c+ZMXX311TrttNP03nvvHbbPiy++qKysLA0YMEAPPPCASkpKKm0/dAjykT4F9etf/1r33Xdf8Ou33npL55xzjvr06aOsrCzdcccdkqT77rtPixcv1pQpU4KfGNq2bZskae3atbr55ps1YMAAZWVl6be//a3y8vKCz1lYWKjRo0drwIABGjZsmF555ZXjXv/rr7+ur776Sq+99pquueYa9ejRQ23bttVFF12kadOmqX379kc8bu/evRo9erROOukk9evXTzfffLM2bdoU3P7DDz/otttu00knnaT+/ftrxIgRmjt3bnD78a7laJo2bapmzZrppJNO0u23367vv/9emzdvDn7Kau7cubr00kvVp08fff3110ccHj59+nSNGDFCvXv31rBhwzR+/Pjgtn379ul3v/udhgwZoszMTF1//fVavXr1cesCAAAADkVfg74GfQ0AkYxgAwDqsFmzZqlTp07q1KmTLr74Ys2YMUPW2uD2mTNn6tlnn9V///d/a8aMGUpPT9fbb799QudcsWKFHn30Ud1xxx365JNPNHnyZA0aNEiS9Lvf/U4DBgzQFVdcofnz52v+/Plq2bKl9u3bpxtuuEE9e/bU9OnTNXnyZOXm5uquu+4KPu+TTz6pf//73/rzn/+sl19+WYsXL9aqVauOWcuHH36orKws9ezZ87Bt0dHRSkhIOOJx9913n1auXKnnn39ef/3rX2Wt1S233BIcTj5+/HiVlpbqzTff1Icffqh77703+FxVuZaqiIuLk6RKQ9gnTpyoe+65RzNnzlS3bt0OO+btt9/W+PHjdcUVV+jDDz/Un//8Z7Vr1y64/c4771Rubq5eeuklvfvuu+rVq5duuOEG7dmzp1q1AQAAAPQ16GvQ1wAQyZiKCgDqsOnTp+viiy+WJA0fPlz79+/X4sWLNXjwYEnSlClTdNlll+nyyy+XJP33f/+3Fi5ceNgnqapjx44dio+P12mnnaakpCS1bt06+GY/OTlZ0dHRiouLU3p6evCYN998Uz179tTdd98dfOyxxx7Tqaeeqo0bN6pZs2aaPn26/vjHP2ro0KGSpCeeeEKnnnrqMWvZvHmzfvazn1Wr/k2bNunzzz/XO++8o8zMTEnShAkTdNppp2n27Nk6//zztX37dp177rnBN/xt27at8rV07NjxuDXs2rVLL7/8spo3b66OHTtqyZIlkqQ77rhDJ5988lGPe/7553XjjTfqhhtuCD7Wt29fSdJXX32l5cuXa+HChYqJiZEkjRkzRrNnz9bf//53XXnllVVtIgAAAIC+Bn0N+hoAIhrBBgDUURs2bNCKFSv03HPPSZKioqJ0wQUXaPr06cHOxvr163XVVVdVOq5///768ssva3zerKwstWrVSmeddZaGDx+u4cOH6+yzz1Z8fPxRj1m9erW+/PJLDRgw4LBtW7ZsUUlJicrKytSvX7/g440aNTruG/eDPzFWVevXr1dUVFSlczVu3FgdO3bU+vXrJUnXX3+9xo4dq/nz5ysrK0vnnHOOunfvXqVrOVbNp556qqy1KioqUvfu3fXss88GOwaS1KdPn6Mem5ubq127dgU7Y4das2aNCgsLg6/9AcXFxdqyZctRnxcAAAA4FH0N+hoHo68BIBIRbABAHTV9+nSVl5dr+PDhwcestYqJidFDDz2k5OTkGj2vMeawN/Hl5eXBvyclJem9997T4sWLNX/+fE2aNEl/+tOfNH36dKWkpBzxOQsLC3X66afr3nvvPWxbenp6jd8Md+jQQRs3bqzRscdy+eWXa9iwYZozZ46++OILvfjiixozZoyuu+66417Lsbz11ltKSkpSkyZNlJSUdNj2Y3XYYmNjj/ncBQUFSk9P1xtvvHHYtpp+LwAAAKBhoq9BX+Ng9DUARCLW2ACAOqi8vFx/+9vfdN999+n9998P3v72t7+pWbNm+uijjyRJnTt31rJlyyode+jXh2rSpImys7ODX/v9fq1bt67SPlFRUcrKytLo0aP1wQcf6IcfftCiRYskBeabdV230v69evXSunXr1Lp1a7Vv377SLSEhQW3btlV0dHSl2vbu3Vtpkb0jufDCC7VgwQJ9++23h20rKytTYWHhYY937txZ5eXllc61e/dubdy4UV26dAk+1rJlS1199dX605/+pBtvvFHTpk2r0rUcS5s2bdSuXbsjdjSO58BQ/IULFx5xe69evZSTkyOfz3dYXU2aNKn2+QAAANAw0dcIoK/xE/oaACIRwQYA1EFz5szR3r17ddlllykjI6PS7ZxzztH06dMlBYY5z5gxQzNmzNDGjRs1adKkwzoOhxoyZIjmzp2rOXPmaP369Ro7dqz27dsX3P7Pf/5TU6ZM0XfffacffvhB77//vlzXDQ6Lbt26tZYtW6Zt27YpLy9PruvqP//zP7V3717dfffdWr58ubZs2aJ58+bp/vvvl9/vV2JiokaOHKk//vGPWrhwodauXav77rtPxphj1jpq1ChlZmZq1KhReuutt7R69Wpt3bpVM2fO1JVXXqnNmzcfdkyHDh105pln6sEHH9RXX32l1atX67e//a2aN2+uM888U5L06KOPat68edq6datWrVqlL7/8Up07d5ak415LOP3mN7/Rq6++qilTpmjTpk1atWpV8FNTWVlZ6t+/v26//XbNnz9f27Zt0zfffKP//d//1YoVK8JaFwAAAOoP+hoB9DXoawCIbExFBQB10PTp05WVlXXEYb/nnnuuJk+erNWrV+uCCy7Qli1b9Mc//lElJSU699xzdfXVV2v+/PlHfe6RI0dq9erVGjNmjHw+n0aNGlVpLtXk5GR9+umn+tOf/qSSkhK1b99eEydOVNeuXSVJv/jFL3TfffdpxIgRKi4u1meffaY2bdronXfe0YQJE3TTTTeptLRUrVq10vDhw+U4gQx99OjRKiws1K9+9SslJibqxhtvVH5+/jHbISYmRq+++qpee+01TZ06VX/4wx8UHx+vTp066brrrgvWdKjHH39cjz76qG677TaVlZVp0KBBevHFFxUdHS1Jcl1X48eP148//qikpCQNHz5c999/vySpefPmx72WcLnkkktUUlKi1157TU8++aQaNWqk8847T1JgWP+LL76op59+Wvfff792796ttLQ0DRo0SGlpaWGtCwAAAPUHfY0A+hr0NQBENmNrsloSACBiTJw4UV999ZXeeecdr0sBAAAAUI/Q1wAAeIWpqACgnrLWasuWLVq4cOFRP20EAAAAANVFXwMA4DWCDQCop/bv368LLrhA0dHRuvXWW70uBwAAAEA9QV8DAOA1pqICAAAAAAAAAAARgxEbAAAAAAAAAAAgYhBsAAAAAAAAAACAiEGwAQAAAAAAAAAAIgbBBgAAAAAAAAAAiBgEGwAAAAAAAAAAIGIQbAAAAAAAAAAAgIhBsAEAAAAAAAAAACIGwQYAAAAAAAAAAIgYBBsAAAAAAAAAACBi/D/gEqqt7QOzewAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uYz_maLjfjtG",
        "outputId": "681c2c78-dc95-4482-b7c4-6decf1efe471"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Esta es la ruta donde guardamos el archivo\n",
        "ruta_archivo = '/content/drive/MyDrive/Big_Tech_Analysis_Cleaned.csv'\n",
        "\n",
        "# Carga el archivo en un DataFrame\n",
        "df_completo = pd.read_csv(ruta_archivo)"
      ],
      "metadata": {
        "id": "UBiDhe6-fuTB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Muestra las primeras 5 filas\n",
        "print(\"Datos cargados correctamente. Aqu√≠ est√°n las primeras 5 filas:\")\n",
        "display(df_completo.head())\n",
        "\n",
        "# Muestra un resumen y los tipos de datos\n",
        "print(\"\\nInformaci√≥n del DataFrame:\")\n",
        "df_completo.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "inwV9P7QgGNb",
        "outputId": "91e42c46-2ba1-441b-fdc0-9c188291d77c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Datos cargados correctamente. Aqu√≠ est√°n las primeras 5 filas:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  stock_symbol        date      open      high       low     close  adj_close  \\\n",
              "0         AAPL  2010-01-04  7.622500  7.660714  7.585000  7.643214   6.515213   \n",
              "1         AAPL  2010-01-05  7.664286  7.699643  7.616071  7.656429   6.526476   \n",
              "2         AAPL  2010-01-06  7.656429  7.686786  7.526786  7.534643   6.422664   \n",
              "3         AAPL  2010-01-07  7.562500  7.571429  7.466071  7.520714   6.410790   \n",
              "4         AAPL  2010-01-08  7.510714  7.571429  7.466429  7.570714   6.453412   \n",
              "\n",
              "        volume  volume_zscore     company  \n",
              "0  493729600.0       4.726747  Apple Inc.  \n",
              "1  601904800.0       5.886849  Apple Inc.  \n",
              "2  552160000.0       5.353371  Apple Inc.  \n",
              "3  477131200.0       4.548741  Apple Inc.  \n",
              "4  447610800.0       4.232155  Apple Inc.  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f158945-1c80-4b38-be57-23492841e5b8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>stock_symbol</th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>adj_close</th>\n",
              "      <th>volume</th>\n",
              "      <th>volume_zscore</th>\n",
              "      <th>company</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-04</td>\n",
              "      <td>7.622500</td>\n",
              "      <td>7.660714</td>\n",
              "      <td>7.585000</td>\n",
              "      <td>7.643214</td>\n",
              "      <td>6.515213</td>\n",
              "      <td>493729600.0</td>\n",
              "      <td>4.726747</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-05</td>\n",
              "      <td>7.664286</td>\n",
              "      <td>7.699643</td>\n",
              "      <td>7.616071</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>6.526476</td>\n",
              "      <td>601904800.0</td>\n",
              "      <td>5.886849</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-06</td>\n",
              "      <td>7.656429</td>\n",
              "      <td>7.686786</td>\n",
              "      <td>7.526786</td>\n",
              "      <td>7.534643</td>\n",
              "      <td>6.422664</td>\n",
              "      <td>552160000.0</td>\n",
              "      <td>5.353371</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-07</td>\n",
              "      <td>7.562500</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466071</td>\n",
              "      <td>7.520714</td>\n",
              "      <td>6.410790</td>\n",
              "      <td>477131200.0</td>\n",
              "      <td>4.548741</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AAPL</td>\n",
              "      <td>2010-01-08</td>\n",
              "      <td>7.510714</td>\n",
              "      <td>7.571429</td>\n",
              "      <td>7.466429</td>\n",
              "      <td>7.570714</td>\n",
              "      <td>6.453412</td>\n",
              "      <td>447610800.0</td>\n",
              "      <td>4.232155</td>\n",
              "      <td>Apple Inc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f158945-1c80-4b38-be57-23492841e5b8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f158945-1c80-4b38-be57-23492841e5b8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f158945-1c80-4b38-be57-23492841e5b8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-81bd76a7-22d6-4a8c-a7d7-ad7150f8cae2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81bd76a7-22d6-4a8c-a7d7-ad7150f8cae2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-81bd76a7-22d6-4a8c-a7d7-ad7150f8cae2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_completo\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"stock_symbol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"AAPL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2010-01-05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06547409645195561,\n        \"min\": 7.510714,\n        \"max\": 7.664286,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.664286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06236837163739306,\n        \"min\": 7.571429,\n        \"max\": 7.699643,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7.699643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06809971077251346,\n        \"min\": 7.466071,\n        \"max\": 7.616071,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.616071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.061974746709446284,\n        \"min\": 7.520714,\n        \"max\": 7.656429,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.656429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adj_close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05282863589001687,\n        \"min\": 6.41079,\n        \"max\": 6.526476,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.526476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61967483.8207265,\n        \"min\": 447610800.0,\n        \"max\": 601904800.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          601904800.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume_zscore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6645572982665227,\n        \"min\": 4.232155389500018,\n        \"max\": 5.886849068452315,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.886849068452315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Apple Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Informaci√≥n del DataFrame:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45088 entries, 0 to 45087\n",
            "Data columns (total 10 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   stock_symbol   45088 non-null  object \n",
            " 1   date           45088 non-null  object \n",
            " 2   open           45088 non-null  float64\n",
            " 3   high           45088 non-null  float64\n",
            " 4   low            45088 non-null  float64\n",
            " 5   close          45088 non-null  float64\n",
            " 6   adj_close      45088 non-null  float64\n",
            " 7   volume         45088 non-null  float64\n",
            " 8   volume_zscore  45088 non-null  float64\n",
            " 9   company        45088 non-null  object \n",
            "dtypes: float64(7), object(3)\n",
            "memory usage: 3.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Step 1: Calculate the daily percentage return for each stock\n",
        "# We use groupby() to ensure the calculation restarts for each new stock symbol\n",
        "df_completo['daily_return'] = df_completo.groupby('stock_symbol')['adj_close'].pct_change()\n",
        "\n",
        "# Step 2: Calculate dispersion measures for the daily returns of each company\n",
        "# We define a function for the IQR to use it inside .agg()\n",
        "def iqr(x):\n",
        "    return x.quantile(0.75) - x.quantile(0.25)\n",
        "\n",
        "# Group by company and calculate std, var, and iqr for the 'daily_return'\n",
        "volatility_analysis = df_completo.groupby('company')['daily_return'].agg(['std', 'var', iqr])\n",
        "\n",
        "# Rename the columns for clarity\n",
        "volatility_analysis.columns = ['Standard Deviation (Volatility)', 'Variance', 'Interquartile Range']\n",
        "\n",
        "# Sort by volatility to see the most and least stable companies\n",
        "volatility_analysis = volatility_analysis.sort_values(by='Standard Deviation (Volatility)')\n",
        "\n",
        "print(\"An√°lisis de Volatilidad por Empresa:\")\n",
        "display(volatility_analysis)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "rp7pyVnVgmSm",
        "outputId": "b5972d4f-53f3-4fca-fe69-7d4ad4c5bb41"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "An√°lisis de Volatilidad por Empresa:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                             Standard Deviation (Volatility)  \\\n",
              "company                                                                        \n",
              "International Business Machines Corporation                         0.014187   \n",
              "Microsoft Corporation                                               0.016377   \n",
              "Oracle Corporation                                                  0.016442   \n",
              "Cisco Systems, Inc.                                                 0.016845   \n",
              "Alphabet Inc.                                                       0.017032   \n",
              "Apple Inc.                                                          0.018092   \n",
              "Intel Corporation                                                   0.018606   \n",
              "Adobe Inc.                                                          0.019975   \n",
              "Amazon.com, Inc.                                                    0.020811   \n",
              "Salesforce, Inc.                                                    0.023133   \n",
              "Meta Platforms, Inc.                                                0.025248   \n",
              "NVIDIA Corporation                                                  0.028087   \n",
              "Netflix, Inc.                                                       0.032778   \n",
              "Tesla, Inc.                                                         0.036001   \n",
              "\n",
              "                                             Variance  Interquartile Range  \n",
              "company                                                                     \n",
              "International Business Machines Corporation  0.000201             0.013317  \n",
              "Microsoft Corporation                        0.000268             0.016234  \n",
              "Oracle Corporation                           0.000270             0.015356  \n",
              "Cisco Systems, Inc.                          0.000284             0.014944  \n",
              "Alphabet Inc.                                0.000290             0.016149  \n",
              "Apple Inc.                                   0.000327             0.018239  \n",
              "Intel Corporation                            0.000346             0.017933  \n",
              "Adobe Inc.                                   0.000399             0.018474  \n",
              "Amazon.com, Inc.                             0.000433             0.020718  \n",
              "Salesforce, Inc.                             0.000535             0.021838  \n",
              "Meta Platforms, Inc.                         0.000637             0.022786  \n",
              "NVIDIA Corporation                           0.000789             0.027197  \n",
              "Netflix, Inc.                                0.001074             0.028733  \n",
              "Tesla, Inc.                                  0.001296             0.034853  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5dd7eabe-208c-4eb5-bc72-b2565e988963\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Standard Deviation (Volatility)</th>\n",
              "      <th>Variance</th>\n",
              "      <th>Interquartile Range</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>company</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>International Business Machines Corporation</th>\n",
              "      <td>0.014187</td>\n",
              "      <td>0.000201</td>\n",
              "      <td>0.013317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Microsoft Corporation</th>\n",
              "      <td>0.016377</td>\n",
              "      <td>0.000268</td>\n",
              "      <td>0.016234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Oracle Corporation</th>\n",
              "      <td>0.016442</td>\n",
              "      <td>0.000270</td>\n",
              "      <td>0.015356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cisco Systems, Inc.</th>\n",
              "      <td>0.016845</td>\n",
              "      <td>0.000284</td>\n",
              "      <td>0.014944</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Alphabet Inc.</th>\n",
              "      <td>0.017032</td>\n",
              "      <td>0.000290</td>\n",
              "      <td>0.016149</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Apple Inc.</th>\n",
              "      <td>0.018092</td>\n",
              "      <td>0.000327</td>\n",
              "      <td>0.018239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Intel Corporation</th>\n",
              "      <td>0.018606</td>\n",
              "      <td>0.000346</td>\n",
              "      <td>0.017933</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Adobe Inc.</th>\n",
              "      <td>0.019975</td>\n",
              "      <td>0.000399</td>\n",
              "      <td>0.018474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Amazon.com, Inc.</th>\n",
              "      <td>0.020811</td>\n",
              "      <td>0.000433</td>\n",
              "      <td>0.020718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Salesforce, Inc.</th>\n",
              "      <td>0.023133</td>\n",
              "      <td>0.000535</td>\n",
              "      <td>0.021838</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Meta Platforms, Inc.</th>\n",
              "      <td>0.025248</td>\n",
              "      <td>0.000637</td>\n",
              "      <td>0.022786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NVIDIA Corporation</th>\n",
              "      <td>0.028087</td>\n",
              "      <td>0.000789</td>\n",
              "      <td>0.027197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Netflix, Inc.</th>\n",
              "      <td>0.032778</td>\n",
              "      <td>0.001074</td>\n",
              "      <td>0.028733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Tesla, Inc.</th>\n",
              "      <td>0.036001</td>\n",
              "      <td>0.001296</td>\n",
              "      <td>0.034853</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5dd7eabe-208c-4eb5-bc72-b2565e988963')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5dd7eabe-208c-4eb5-bc72-b2565e988963 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5dd7eabe-208c-4eb5-bc72-b2565e988963');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2a5e7662-46bf-42e3-910c-603e501a4790\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a5e7662-46bf-42e3-910c-603e501a4790')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2a5e7662-46bf-42e3-910c-603e501a4790 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_5f77f064-0b27-414d-bfc4-f40523644bd9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('volatility_analysis')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5f77f064-0b27-414d-bfc4-f40523644bd9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('volatility_analysis');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "volatility_analysis",
              "summary": "{\n  \"name\": \"volatility_analysis\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Salesforce, Inc.\",\n          \"NVIDIA Corporation\",\n          \"International Business Machines Corporation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Deviation (Volatility)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00660326984186863,\n        \"min\": 0.014187319257361039,\n        \"max\": 0.03600147263874305,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.023133490521896567,\n          0.028086829900427907,\n          0.014187319257361039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Variance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00033054429181438006,\n        \"min\": 0.00020128002771028738,\n        \"max\": 0.0012961060321581644,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.0005351583837266783,\n          0.0007888700138555711,\n          0.00020128002771028738\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Interquartile Range\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.006124023835559122,\n        \"min\": 0.013317403282190249,\n        \"max\": 0.03485279473482661,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.021837578855500278,\n          0.027197067360568428,\n          0.013317403282190249\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Select only the most relevant numeric columns for the correlation analysis\n",
        "numeric_columns = ['open', 'high', 'low', 'adj_close', 'volume', 'daily_return']\n",
        "df_numeric = df_completo[numeric_columns]\n",
        "\n",
        "# Calculate the correlation matrix\n",
        "correlation_matrix = df_numeric.corr()\n",
        "\n",
        "# Create the heatmap\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "plt.title('Correlation Matrix of Key Numerical Variables')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "Daz37hfwlg3l",
        "outputId": "f9233d91-d2ea-4e7a-b015-e64c2bc27223"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# --- Step 1: Calculate Volatility (if you haven't already) ---\n",
        "# Ensure 'date' is a datetime object\n",
        "df_completo['date'] = pd.to_datetime(df_completo['date'])\n",
        "# Calculate daily returns\n",
        "df_completo['daily_return'] = df_completo.groupby('stock_symbol')['adj_close'].pct_change()\n",
        "# Calculate standard deviation of returns for each company\n",
        "volatility_analysis = df_completo.groupby('company')['daily_return'].std().reset_index()\n",
        "volatility_analysis.rename(columns={'daily_return': 'volatility'}, inplace=True)\n",
        "\n",
        "\n",
        "# --- Step 2: Create Volatility Segments ---\n",
        "# Define the boundaries for our segments using quantiles\n",
        "low_vol_threshold = volatility_analysis['volatility'].quantile(0.33)\n",
        "high_vol_threshold = volatility_analysis['volatility'].quantile(0.66)\n",
        "\n",
        "# Create a function to assign segments\n",
        "def assign_segment(volatility):\n",
        "    if volatility <= low_vol_threshold:\n",
        "        return 'Low Volatility'\n",
        "    elif volatility <= high_vol_threshold:\n",
        "        return 'Medium Volatility'\n",
        "    else:\n",
        "        return 'High Volatility'\n",
        "\n",
        "# Apply the function to create a new 'segment' column\n",
        "volatility_analysis['segment'] = volatility_analysis['volatility'].apply(assign_segment)\n",
        "\n",
        "\n",
        "# --- Step 3: View the Results ---\n",
        "print(\"Companies Segmented by Volatility:\")\n",
        "display(volatility_analysis.sort_values(by='volatility'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "uzU0e87GHNAf",
        "outputId": "c6a27dc0-1cd4-411a-8a63-44e636c73c82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'df_completo' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2243062917.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# --- Step 1: Calculate Volatility (if you haven't already) ---\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Ensure 'date' is a datetime object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdf_completo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_completo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;31m# Calculate daily returns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mdf_completo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'daily_return'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_completo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'stock_symbol'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'adj_close'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpct_change\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'df_completo' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import drive\n",
        "\n",
        "# --- Step 1: Mount Drive and Load Data ---\n",
        "drive.mount('/content/drive')\n",
        "ruta_archivo = '/content/drive/MyDrive/Big_Tech_Analysis_Cleaned.csv'\n",
        "df_completo = pd.read_csv(ruta_archivo)\n",
        "\n",
        "\n",
        "# --- Step 2: Calculate Volatility ---\n",
        "df_completo['date'] = pd.to_datetime(df_completo['date'])\n",
        "df_completo['daily_return'] = df_completo.groupby('stock_symbol')['adj_close'].pct_change()\n",
        "volatility_analysis = df_completo.groupby('company')['daily_return'].std().reset_index()\n",
        "volatility_analysis.rename(columns={'daily_return': 'volatility'}, inplace=True)\n",
        "\n",
        "\n",
        "# --- Step 3: Create Volatility Segments ---\n",
        "low_vol_threshold = volatility_analysis['volatility'].quantile(0.33)\n",
        "high_vol_threshold = volatility_analysis['volatility'].quantile(0.66)\n",
        "\n",
        "def assign_segment(volatility):\n",
        "    if volatility <= low_vol_threshold:\n",
        "        return 'Low Volatility'\n",
        "    elif volatility <= high_vol_threshold:\n",
        "        return 'Medium Volatility'\n",
        "    else:\n",
        "        return 'High Volatility'\n",
        "\n",
        "volatility_analysis['segment'] = volatility_analysis['volatility'].apply(assign_segment)\n",
        "\n",
        "\n",
        "# --- Step 4: View the Results ---\n",
        "print(\"Companies Segmented by Volatility:\")\n",
        "display(volatility_analysis.sort_values(by='volatility'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "1P414mh5H40B",
        "outputId": "552b7377-eba2-4726-934b-8fed80312395"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Companies Segmented by Volatility:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                        company  volatility            segment\n",
              "6   International Business Machines Corporation    0.014187     Low Volatility\n",
              "8                         Microsoft Corporation    0.016377     Low Volatility\n",
              "11                           Oracle Corporation    0.016442     Low Volatility\n",
              "4                           Cisco Systems, Inc.    0.016845     Low Volatility\n",
              "1                                 Alphabet Inc.    0.017032     Low Volatility\n",
              "3                                    Apple Inc.    0.018092  Medium Volatility\n",
              "5                             Intel Corporation    0.018606  Medium Volatility\n",
              "0                                    Adobe Inc.    0.019975  Medium Volatility\n",
              "2                              Amazon.com, Inc.    0.020811  Medium Volatility\n",
              "12                             Salesforce, Inc.    0.023133    High Volatility\n",
              "7                          Meta Platforms, Inc.    0.025248    High Volatility\n",
              "9                            NVIDIA Corporation    0.028087    High Volatility\n",
              "10                                Netflix, Inc.    0.032778    High Volatility\n",
              "13                                  Tesla, Inc.    0.036001    High Volatility"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e949349f-2dd3-4aa5-8842-94cf1b0c938b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>company</th>\n",
              "      <th>volatility</th>\n",
              "      <th>segment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>International Business Machines Corporation</td>\n",
              "      <td>0.014187</td>\n",
              "      <td>Low Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Microsoft Corporation</td>\n",
              "      <td>0.016377</td>\n",
              "      <td>Low Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Oracle Corporation</td>\n",
              "      <td>0.016442</td>\n",
              "      <td>Low Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "      <td>0.016845</td>\n",
              "      <td>Low Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alphabet Inc.</td>\n",
              "      <td>0.017032</td>\n",
              "      <td>Low Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Apple Inc.</td>\n",
              "      <td>0.018092</td>\n",
              "      <td>Medium Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Intel Corporation</td>\n",
              "      <td>0.018606</td>\n",
              "      <td>Medium Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adobe Inc.</td>\n",
              "      <td>0.019975</td>\n",
              "      <td>Medium Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "      <td>0.020811</td>\n",
              "      <td>Medium Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "      <td>0.023133</td>\n",
              "      <td>High Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Meta Platforms, Inc.</td>\n",
              "      <td>0.025248</td>\n",
              "      <td>High Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NVIDIA Corporation</td>\n",
              "      <td>0.028087</td>\n",
              "      <td>High Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Netflix, Inc.</td>\n",
              "      <td>0.032778</td>\n",
              "      <td>High Volatility</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Tesla, Inc.</td>\n",
              "      <td>0.036001</td>\n",
              "      <td>High Volatility</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e949349f-2dd3-4aa5-8842-94cf1b0c938b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e949349f-2dd3-4aa5-8842-94cf1b0c938b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e949349f-2dd3-4aa5-8842-94cf1b0c938b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a6258044-94c4-414d-8dc5-bf218a0971de\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a6258044-94c4-414d-8dc5-bf218a0971de')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a6258044-94c4-414d-8dc5-bf218a0971de button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(volatility_analysis\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Salesforce, Inc.\",\n          \"NVIDIA Corporation\",\n          \"International Business Machines Corporation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volatility\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00660326984186863,\n        \"min\": 0.014187319257361039,\n        \"max\": 0.03600147263874305,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          0.023133490521896567,\n          0.028086829900427907,\n          0.014187319257361039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"segment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Low Volatility\",\n          \"Medium Volatility\",\n          \"High Volatility\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Aseg√∫rate de que los datos est√©n ordenados por fecha\n",
        "df_completo = df_completo.sort_values(by=['company', 'date'])\n",
        "\n",
        "# Agrupa por empresa y toma el primer y √∫ltimo precio ajustado\n",
        "primer_precio = df_completo.groupby('company')['adj_close'].first()\n",
        "ultimo_precio = df_completo.groupby('company')['adj_close'].last()\n",
        "\n",
        "# Calcula el rendimiento total\n",
        "rendimiento_total = ((ultimo_precio - primer_precio) / primer_precio) * 100\n",
        "\n",
        "# Convierte a un DataFrame para segmentar\n",
        "df_rendimiento = rendimiento_total.reset_index()\n",
        "df_rendimiento.rename(columns={'adj_close': 'rendimiento_total_%'}, inplace=True)\n",
        "\n",
        "# Define los umbrales usando cuantiles\n",
        "bajo_rendimiento = df_rendimiento['rendimiento_total_%'].quantile(0.33)\n",
        "alto_rendimiento = df_rendimiento['rendimiento_total_%'].quantile(0.66)\n",
        "\n",
        "# Asigna los segmentos\n",
        "def asignar_segmento_rendimiento(rendimiento):\n",
        "    if rendimiento <= bajo_rendimiento:\n",
        "        return 'Bajo Crecimiento'\n",
        "    elif rendimiento <= alto_rendimiento:\n",
        "        return 'Crecimiento Moderado'\n",
        "    else:\n",
        "        return 'Alto Crecimiento'\n",
        "\n",
        "df_rendimiento['segmento_rendimiento'] = df_rendimiento['rendimiento_total_%'].apply(asignar_segmento_rendimiento)\n",
        "\n",
        "print(\"Empresas Segmentadas por Rendimiento Total:\")\n",
        "display(df_rendimiento.sort_values(by='rendimiento_total_%'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "euCxcB2aKRel",
        "outputId": "cfa2229c-c12b-49ef-c5ed-7d8e6da92934"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Empresas Segmentadas por Rendimiento Total:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                        company  rendimiento_total_%  \\\n",
              "6   International Business Machines Corporation            73.474092   \n",
              "5                             Intel Corporation            86.943731   \n",
              "4                           Cisco Systems, Inc.           170.916043   \n",
              "7                          Meta Platforms, Inc.           274.417994   \n",
              "11                           Oracle Corporation           290.798685   \n",
              "1                                 Alphabet Inc.           463.934899   \n",
              "12                             Salesforce, Inc.           608.580556   \n",
              "0                                    Adobe Inc.           810.164430   \n",
              "8                         Microsoft Corporation           917.646719   \n",
              "2                              Amazon.com, Inc.          1157.356236   \n",
              "3                                    Apple Inc.          1889.344032   \n",
              "9                            NVIDIA Corporation          3342.227574   \n",
              "10                                Netflix, Inc.          3710.471139   \n",
              "13                                  Tesla, Inc.          7568.063855   \n",
              "\n",
              "    segmento_rendimiento  \n",
              "6       Bajo Crecimiento  \n",
              "5       Bajo Crecimiento  \n",
              "4       Bajo Crecimiento  \n",
              "7       Bajo Crecimiento  \n",
              "11      Bajo Crecimiento  \n",
              "1   Crecimiento Moderado  \n",
              "12  Crecimiento Moderado  \n",
              "0   Crecimiento Moderado  \n",
              "8   Crecimiento Moderado  \n",
              "2       Alto Crecimiento  \n",
              "3       Alto Crecimiento  \n",
              "9       Alto Crecimiento  \n",
              "10      Alto Crecimiento  \n",
              "13      Alto Crecimiento  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4af3eaa1-94f0-4c7f-bb17-e9bad1623ca3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>company</th>\n",
              "      <th>rendimiento_total_%</th>\n",
              "      <th>segmento_rendimiento</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>International Business Machines Corporation</td>\n",
              "      <td>73.474092</td>\n",
              "      <td>Bajo Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Intel Corporation</td>\n",
              "      <td>86.943731</td>\n",
              "      <td>Bajo Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "      <td>170.916043</td>\n",
              "      <td>Bajo Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Meta Platforms, Inc.</td>\n",
              "      <td>274.417994</td>\n",
              "      <td>Bajo Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Oracle Corporation</td>\n",
              "      <td>290.798685</td>\n",
              "      <td>Bajo Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alphabet Inc.</td>\n",
              "      <td>463.934899</td>\n",
              "      <td>Crecimiento Moderado</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "      <td>608.580556</td>\n",
              "      <td>Crecimiento Moderado</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adobe Inc.</td>\n",
              "      <td>810.164430</td>\n",
              "      <td>Crecimiento Moderado</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Microsoft Corporation</td>\n",
              "      <td>917.646719</td>\n",
              "      <td>Crecimiento Moderado</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "      <td>1157.356236</td>\n",
              "      <td>Alto Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Apple Inc.</td>\n",
              "      <td>1889.344032</td>\n",
              "      <td>Alto Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NVIDIA Corporation</td>\n",
              "      <td>3342.227574</td>\n",
              "      <td>Alto Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Netflix, Inc.</td>\n",
              "      <td>3710.471139</td>\n",
              "      <td>Alto Crecimiento</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Tesla, Inc.</td>\n",
              "      <td>7568.063855</td>\n",
              "      <td>Alto Crecimiento</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4af3eaa1-94f0-4c7f-bb17-e9bad1623ca3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4af3eaa1-94f0-4c7f-bb17-e9bad1623ca3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4af3eaa1-94f0-4c7f-bb17-e9bad1623ca3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2f4bfc22-7520-4f2b-b91c-0e2abe67dcc5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f4bfc22-7520-4f2b-b91c-0e2abe67dcc5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2f4bfc22-7520-4f2b-b91c-0e2abe67dcc5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df_rendimiento\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Amazon.com, Inc.\",\n          \"NVIDIA Corporation\",\n          \"International Business Machines Corporation\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rendimiento_total_%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2090.3873633081967,\n        \"min\": 73.47409174979174,\n        \"max\": 7568.06385479147,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1157.3562359970128,\n          3342.2275736031615,\n          73.47409174979174\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"segmento_rendimiento\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Bajo Crecimiento\",\n          \"Crecimiento Moderado\",\n          \"Alto Crecimiento\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcula el precio promedio de 'adj_close' para cada empresa\n",
        "precio_promedio = df_completo.groupby('company')['adj_close'].mean().reset_index()\n",
        "precio_promedio.rename(columns={'adj_close': 'precio_promedio'}, inplace=True)\n",
        "\n",
        "# Define los umbrales usando cuantiles\n",
        "precio_bajo = precio_promedio['precio_promedio'].quantile(0.33)\n",
        "precio_alto = precio_promedio['precio_promedio'].quantile(0.66)\n",
        "\n",
        "# Asigna los segmentos\n",
        "def asignar_segmento_precio(precio):\n",
        "    if precio <= precio_bajo:\n",
        "        return 'Nivel de Precio Bajo'\n",
        "    elif precio <= precio_alto:\n",
        "        return 'Nivel de Precio Medio'\n",
        "    else:\n",
        "        return 'Nivel de Precio Alto'\n",
        "\n",
        "precio_promedio['segmento_precio'] = precio_promedio['precio_promedio'].apply(asignar_segmento_precio)\n",
        "\n",
        "print(\"\\nEmpresas Segmentadas por Nivel de Precio Promedio:\")\n",
        "display(precio_promedio.sort_values(by='precio_promedio'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "qActvEmJKqEO",
        "outputId": "c08597d2-b87c-491f-ff58-a634f10ada64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Empresas Segmentadas por Nivel de Precio Promedio:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                        company  precio_promedio  \\\n",
              "4                           Cisco Systems, Inc.        28.624463   \n",
              "5                             Intel Corporation        31.310983   \n",
              "11                           Oracle Corporation        42.572566   \n",
              "1                                 Alphabet Inc.        49.148954   \n",
              "3                                    Apple Inc.        49.445122   \n",
              "9                            NVIDIA Corporation        50.282939   \n",
              "13                                  Tesla, Inc.        58.805222   \n",
              "2                              Amazon.com, Inc.        58.905287   \n",
              "8                         Microsoft Corporation        95.285446   \n",
              "12                             Salesforce, Inc.       103.400510   \n",
              "6   International Business Machines Corporation       113.148579   \n",
              "7                          Meta Platforms, Inc.       147.913244   \n",
              "0                                    Adobe Inc.       186.022299   \n",
              "10                                Netflix, Inc.       188.252178   \n",
              "\n",
              "          segmento_precio  \n",
              "4    Nivel de Precio Bajo  \n",
              "5    Nivel de Precio Bajo  \n",
              "11   Nivel de Precio Bajo  \n",
              "1    Nivel de Precio Bajo  \n",
              "3    Nivel de Precio Bajo  \n",
              "9   Nivel de Precio Medio  \n",
              "13  Nivel de Precio Medio  \n",
              "2   Nivel de Precio Medio  \n",
              "8   Nivel de Precio Medio  \n",
              "12   Nivel de Precio Alto  \n",
              "6    Nivel de Precio Alto  \n",
              "7    Nivel de Precio Alto  \n",
              "0    Nivel de Precio Alto  \n",
              "10   Nivel de Precio Alto  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea4e7f25-748b-40ca-bba1-f8aeff0df30f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>company</th>\n",
              "      <th>precio_promedio</th>\n",
              "      <th>segmento_precio</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "      <td>28.624463</td>\n",
              "      <td>Nivel de Precio Bajo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Intel Corporation</td>\n",
              "      <td>31.310983</td>\n",
              "      <td>Nivel de Precio Bajo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Oracle Corporation</td>\n",
              "      <td>42.572566</td>\n",
              "      <td>Nivel de Precio Bajo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alphabet Inc.</td>\n",
              "      <td>49.148954</td>\n",
              "      <td>Nivel de Precio Bajo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Apple Inc.</td>\n",
              "      <td>49.445122</td>\n",
              "      <td>Nivel de Precio Bajo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NVIDIA Corporation</td>\n",
              "      <td>50.282939</td>\n",
              "      <td>Nivel de Precio Medio</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Tesla, Inc.</td>\n",
              "      <td>58.805222</td>\n",
              "      <td>Nivel de Precio Medio</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "      <td>58.905287</td>\n",
              "      <td>Nivel de Precio Medio</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Microsoft Corporation</td>\n",
              "      <td>95.285446</td>\n",
              "      <td>Nivel de Precio Medio</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "      <td>103.400510</td>\n",
              "      <td>Nivel de Precio Alto</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>International Business Machines Corporation</td>\n",
              "      <td>113.148579</td>\n",
              "      <td>Nivel de Precio Alto</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Meta Platforms, Inc.</td>\n",
              "      <td>147.913244</td>\n",
              "      <td>Nivel de Precio Alto</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adobe Inc.</td>\n",
              "      <td>186.022299</td>\n",
              "      <td>Nivel de Precio Alto</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Netflix, Inc.</td>\n",
              "      <td>188.252178</td>\n",
              "      <td>Nivel de Precio Alto</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea4e7f25-748b-40ca-bba1-f8aeff0df30f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea4e7f25-748b-40ca-bba1-f8aeff0df30f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea4e7f25-748b-40ca-bba1-f8aeff0df30f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0bd1aa2f-4156-49f0-ab8f-d64cd5181b06\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0bd1aa2f-4156-49f0-ab8f-d64cd5181b06')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0bd1aa2f-4156-49f0-ab8f-d64cd5181b06 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(precio_promedio\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Salesforce, Inc.\",\n          \"Meta Platforms, Inc.\",\n          \"Cisco Systems, Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"precio_promedio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.79446516023557,\n        \"min\": 28.62446335952308,\n        \"max\": 188.2521778862733,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          103.40051047783554,\n          147.9132440643601,\n          28.62446335952308\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"segmento_precio\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Nivel de Precio Bajo\",\n          \"Nivel de Precio Medio\",\n          \"Nivel de Precio Alto\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set the style and a good size for the plot\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.figure(figsize=(12, 8))\n",
        "\n",
        "# Create the bar chart\n",
        "# x-axis is the numeric value (volatility)\n",
        "# y-axis is the category (company)\n",
        "# 'hue' is used to color the bars based on the 'segment' column\n",
        "sns.barplot(\n",
        "    x='volatility',\n",
        "    y='company',\n",
        "    hue='segment',\n",
        "    data=volatility_analysis.sort_values(by='volatility', ascending=False),\n",
        "    dodge=False # This ensures the bars aren't split by the hue\n",
        ")\n",
        "\n",
        "# Add titles and labels\n",
        "plt.title('Volatility Comparison by Company', fontsize=16)\n",
        "plt.xlabel('Standard Deviation of Daily Returns (Volatility)', fontsize=12)\n",
        "plt.ylabel('Company', fontsize=12)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 724
        },
        "id": "R7YEZ7KoKzVC",
        "outputId": "a4ac2af4-7abf-4ed2-b2f7-11b3faa73759"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- Paso 1: Calcular la Variaci√≥n Diaria Normalizada ---\n",
        "# Se calcula la diferencia entre el precio alto y bajo, y se divide por el precio de cierre\n",
        "# para obtener una medida porcentual de la variaci√≥n diaria.\n",
        "df_completo['daily_variation_%'] = (df_completo['high'] - df_completo['low']) / df_completo['adj_close'] * 100\n",
        "\n",
        "# --- Paso 2: Calcular la Variaci√≥n Promedio por Empresa ---\n",
        "# Agrupamos por empresa y calculamos la media de la variaci√≥n diaria.\n",
        "avg_variation = df_completo.groupby('company')['daily_variation_%'].mean().reset_index()\n",
        "avg_variation.rename(columns={'daily_variation_%': 'avg_daily_variation'}, inplace=True)\n",
        "\n",
        "# --- Paso 3: Segmentar las Empresas ---\n",
        "# Usamos cuantiles para definir los umbrales de los segmentos.\n",
        "low_var_threshold = avg_variation['avg_daily_variation'].quantile(0.33)\n",
        "high_var_threshold = avg_variation['avg_daily_variation'].quantile(0.66)\n",
        "\n",
        "def assign_segment(variation):\n",
        "    if variation <= low_var_threshold:\n",
        "        return 'Baja Variaci√≥n'\n",
        "    elif variation <= high_var_threshold:\n",
        "        return 'Media Variaci√≥n'\n",
        "    else:\n",
        "        return 'Alta Variaci√≥n'\n",
        "\n",
        "avg_variation['segment'] = avg_variation['avg_daily_variation'].apply(assign_segment)\n",
        "\n",
        "# --- Paso 4: Mostrar el Resultado ---\n",
        "print(\"Empresas Segmentadas por Variaci√≥n Promedio Diaria:\")\n",
        "display(avg_variation.sort_values(by='avg_daily_variation'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "qNobM2jBN229",
        "outputId": "49c53b8d-57fe-4a55-bcd9-a2b9d3507232"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Empresas Segmentadas por Variaci√≥n Promedio Diaria:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                        company  avg_daily_variation  \\\n",
              "1                                 Alphabet Inc.             1.896580   \n",
              "6   International Business Machines Corporation             2.003837   \n",
              "11                           Oracle Corporation             2.062253   \n",
              "8                         Microsoft Corporation             2.092784   \n",
              "3                                    Apple Inc.             2.192950   \n",
              "0                                    Adobe Inc.             2.255446   \n",
              "4                           Cisco Systems, Inc.             2.268495   \n",
              "2                              Amazon.com, Inc.             2.383404   \n",
              "5                             Intel Corporation             2.507349   \n",
              "7                          Meta Platforms, Inc.             2.656027   \n",
              "12                             Salesforce, Inc.             2.693007   \n",
              "9                            NVIDIA Corporation             3.357472   \n",
              "10                                Netflix, Inc.             3.487366   \n",
              "13                                  Tesla, Inc.             4.202955   \n",
              "\n",
              "            segment  \n",
              "1    Baja Variaci√≥n  \n",
              "6    Baja Variaci√≥n  \n",
              "11   Baja Variaci√≥n  \n",
              "8    Baja Variaci√≥n  \n",
              "3    Baja Variaci√≥n  \n",
              "0   Media Variaci√≥n  \n",
              "4   Media Variaci√≥n  \n",
              "2   Media Variaci√≥n  \n",
              "5   Media Variaci√≥n  \n",
              "7    Alta Variaci√≥n  \n",
              "12   Alta Variaci√≥n  \n",
              "9    Alta Variaci√≥n  \n",
              "10   Alta Variaci√≥n  \n",
              "13   Alta Variaci√≥n  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8439ace-a7f7-40d7-a35b-5fd2dab35db0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>company</th>\n",
              "      <th>avg_daily_variation</th>\n",
              "      <th>segment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alphabet Inc.</td>\n",
              "      <td>1.896580</td>\n",
              "      <td>Baja Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>International Business Machines Corporation</td>\n",
              "      <td>2.003837</td>\n",
              "      <td>Baja Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Oracle Corporation</td>\n",
              "      <td>2.062253</td>\n",
              "      <td>Baja Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Microsoft Corporation</td>\n",
              "      <td>2.092784</td>\n",
              "      <td>Baja Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Apple Inc.</td>\n",
              "      <td>2.192950</td>\n",
              "      <td>Baja Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adobe Inc.</td>\n",
              "      <td>2.255446</td>\n",
              "      <td>Media Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Cisco Systems, Inc.</td>\n",
              "      <td>2.268495</td>\n",
              "      <td>Media Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amazon.com, Inc.</td>\n",
              "      <td>2.383404</td>\n",
              "      <td>Media Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Intel Corporation</td>\n",
              "      <td>2.507349</td>\n",
              "      <td>Media Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Meta Platforms, Inc.</td>\n",
              "      <td>2.656027</td>\n",
              "      <td>Alta Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Salesforce, Inc.</td>\n",
              "      <td>2.693007</td>\n",
              "      <td>Alta Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NVIDIA Corporation</td>\n",
              "      <td>3.357472</td>\n",
              "      <td>Alta Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Netflix, Inc.</td>\n",
              "      <td>3.487366</td>\n",
              "      <td>Alta Variaci√≥n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Tesla, Inc.</td>\n",
              "      <td>4.202955</td>\n",
              "      <td>Alta Variaci√≥n</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8439ace-a7f7-40d7-a35b-5fd2dab35db0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e8439ace-a7f7-40d7-a35b-5fd2dab35db0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e8439ace-a7f7-40d7-a35b-5fd2dab35db0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-112481a8-f139-4777-98d9-cdefb2637be0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-112481a8-f139-4777-98d9-cdefb2637be0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-112481a8-f139-4777-98d9-cdefb2637be0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(avg_variation\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Meta Platforms, Inc.\",\n          \"NVIDIA Corporation\",\n          \"Alphabet Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_daily_variation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.666830926998996,\n        \"min\": 1.8965797536301146,\n        \"max\": 4.202955126021854,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2.6560269041785056,\n          3.3574717077785583,\n          1.8965797536301146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"segment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Baja Variaci\\u00f3n\",\n          \"Media Variaci\\u00f3n\",\n          \"Alta Variaci\\u00f3n\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Creaci√≥n del Gr√°fico ---\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.barplot(\n",
        "    x='avg_daily_variation',\n",
        "    y='company',\n",
        "    hue='segment',\n",
        "    data=avg_variation.sort_values(by='avg_daily_variation', ascending=False),\n",
        "    dodge=False,\n",
        "    palette={'Baja Variaci√≥n': 'green', 'Media Variaci√≥n': 'orange', 'Alta Variaci√≥n': 'red'}\n",
        ")\n",
        "\n",
        "# --- T√≠tulos y Etiquetas ---\n",
        "plt.title('Variaci√≥n Promedio Diaria por Empresa', fontsize=16)\n",
        "plt.xlabel('Variaci√≥n Promedio Diaria (%)', fontsize=12)\n",
        "plt.ylabel('Empresa', fontsize=12)\n",
        "plt.legend(title='Segmento')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 726
        },
        "id": "5ZbsxSlcOPGF",
        "outputId": "baee9371-92b9-4bb2-94c8-e7456cbd8c1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# An√°lisis de Volatilidad de Acciones \"Big Tech\" para Nuevos Inversores\n",
        "\n",
        "**Proyecto realizado para:** DataLab\n",
        "**Autor:** [Tu Nombre]\n",
        "**Fecha:** 17 de Septiembre de 2025\n",
        "\n",
        "---\n",
        "\n",
        "## 1. Introducci√≥n\n",
        "\n",
        "El presente informe tiene como objetivo analizar los precios de las acciones de 14 de las empresas tecnol√≥gicas m√°s grandes del mundo para identificar aquellas con la mayor estabilidad de precios. La recomendaci√≥n final est√° dirigida a un inversor con un perfil conservador que busca minimizar el riesgo.\n",
        "\n",
        "---\n",
        "\n",
        "## 2. Metodolog√≠a\n",
        "\n",
        "Se analizaron los datos de precios diarios de acciones desde el **4 de enero de 2010 hasta el 12 de septiembre de 2023**. El proceso incluy√≥ las siguientes etapas:\n",
        "\n",
        "1.  **Limpieza de Datos:** Se trataron valores nulos y se eliminaron registros duplicados para asegurar la calidad de los datos.\n",
        "2.  **C√°lculo de la M√©trica Clave:** Para medir la estabilidad, se calcul√≥ la **variaci√≥n porcentual diaria** para cada acci√≥n, definida como `(Precio Alto - Precio Bajo) / Precio de Cierre`.\n",
        "3.  **Agrupaci√≥n y Segmentaci√≥n:** Se calcul√≥ la media de esta variaci√≥n para cada empresa y se utilizaron cuantiles para segmentarlas en tres categor√≠as: **Baja, Media y Alta Variaci√≥n**.\n",
        "\n",
        "---\n",
        "\n",
        "## 3. Resultados\n",
        "\n",
        "El an√°lisis de la variaci√≥n promedio diaria arroj√≥ una clara distinci√≥n entre las empresas. La siguiente tabla resume los resultados, ordenados de menor a mayor volatilidad.\n",
        "\n",
        "*(Aqu√≠ podr√≠as pegar una captura de tu tabla de `avg_variation`)*\n",
        "\n",
        "La visualizaci√≥n de estos resultados permite una comparaci√≥n directa e intuitiva de la estabilidad de cada acci√≥n.\n",
        "\n",
        "*(Aqu√≠ pegar√≠as el gr√°fico de barras que creamos, guardado como imagen)*\n",
        "![Comparaci√≥n de Volatilidad por Empresa](URL_de_tu_grafico.png)\n",
        "\n",
        "---\n",
        "\n",
        "## 4. Conclusiones\n",
        "\n",
        "Los datos muestran que existe una diferencia significativa en la estabilidad de precios entre las diferentes empresas tecnol√≥gicas. Compa√±√≠as m√°s consolidadas como IBM y Oracle tienden a tener una menor fluctuaci√≥n diaria en comparaci√≥n con otras. La segmentaci√≥n nos permite identificar claramente un grupo de acciones que se ajustan al perfil de un inversor que busca bajo riesgo.\n",
        "\n",
        "---\n",
        "\n",
        "## 5. Recomendaci√≥n\n",
        "\n",
        "Para un nuevo inversor con aversi√≥n al riesgo, se recomienda considerar invertir en las empresas del segmento de **\"Baja Variaci√≥n\"**. Estas compa√±√≠as han demostrado tener la menor volatilidad en sus precios diarios. Las principales empresas recomendadas son:\n",
        "\n",
        "* **International Business Machines Corporation (IBM)**\n",
        "* **Oracle Corporation**\n",
        "* **Cisco Systems, Inc.**\n",
        "* **Intel Corporation**\n",
        "\n",
        "Estas acciones representan la opci√≥n m√°s estable y predecible dentro del grupo analizado."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "rqeL7W-_O9UG",
        "outputId": "887dd576-48ba-408b-81c3-a4b3f612848c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-19944570.py, line 3)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-19944570.py\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    **Proyecto realizado para:** DataLab\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# An√°lisis de Volatilidad de Acciones \"Big Tech\" para Nuevos Inversores\n",
        "\n",
        "**Proyecto realizado para:** DataLab  \n",
        "**Autor:** Shirley Sosa\n",
        "**Fecha:** 6 de Octubre de 2025\n",
        "\n",
        "---\n",
        "\n",
        "## 1. Introducci√≥n\n",
        "\n",
        "El presente informe tiene como objetivo analizar los precios de las acciones de 14 de las empresas tecnol√≥gicas m√°s grandes del mundo para identificar aquellas con la mayor estabilidad de precios. La recomendaci√≥n final est√° dirigida a un inversor con un perfil conservador que busca minimizar el riesgo.\n",
        "\n",
        "---\n",
        "\n",
        "## 2. Metodolog√≠a\n",
        "\n",
        "Se analizaron los datos de precios diarios de acciones desde el **4 de enero de 2010 hasta el 12 de septiembre de 2023**. El proceso incluy√≥ las siguientes etapas:\n",
        "\n",
        "1.  **Limpieza de Datos:** Se trataron valores nulos y se eliminaron registros duplicados para asegurar la calidad de los datos.\n",
        "2.  **C√°lculo de la M√©trica Clave:** Para medir la estabilidad, se calcul√≥ la **variaci√≥n porcentual diaria** para cada acci√≥n, definida como `(Precio Alto - Precio Bajo) / Precio de Cierre`.\n",
        "3.  **Agrupaci√≥n y Segmentaci√≥n:** Se calcul√≥ la media de esta variaci√≥n para cada empresa y se utilizaron cuantiles para segmentarlas en tres categor√≠as: **Baja, Media y Alta Variaci√≥n**.\n",
        "\n",
        "---\n",
        "\n",
        "## 3. Resultados\n",
        "\n",
        "El an√°lisis de la variaci√≥n promedio diaria arroj√≥ una clara distinci√≥n entre las empresas. La siguiente tabla resume los resultados, ordenados de mayor a menor volatilidad.\n",
        "\n",
        "Las empresas con **menor volatilidad son IBM, Microsoft, Oracle y Cisco.**\n",
        "Las cuatro empresas que generan m√°s rendimiento son Tesla, Netflix, NVIDIA y Apple.Sin embargo, entre las de **menor volatilidad con m√°s rendimiento se encuentra Microsoft.** Por otro lado, las empresas con precios m√°s bajos son Cisco, Intel y Oracle.\n",
        "\n"
      ],
      "metadata": {
        "id": "hL3HCLI0P2CD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Gr√°fico Interactivo de An√°lisis de Acciones\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import ipywidgets as widgets\n",
        "from ipywidgets import interactive\n",
        "\n",
        "# --- PREPARACI√ìN DE TODOS LOS DATAFRAMES DE AN√ÅLISIS ---\n",
        "\n",
        "# Asegurarse que la fecha es datetime\n",
        "df_completo['date'] = pd.to_datetime(df_completo['date'])\n",
        "\n",
        "# 1. An√°lisis de Volatilidad (AHORA INCLUYE LA SEGMENTACI√ìN)\n",
        "df_completo['daily_return'] = df_completo.groupby('stock_symbol')['adj_close'].pct_change()\n",
        "volatility_analysis = df_completo.groupby('company')['daily_return'].std().reset_index()\n",
        "volatility_analysis.rename(columns={'daily_return': 'volatility'}, inplace=True)\n",
        "\n",
        "# Define los umbrales y asigna los segmentos\n",
        "low_vol_threshold = volatility_analysis['volatility'].quantile(0.33)\n",
        "high_vol_threshold = volatility_analysis['volatility'].quantile(0.66)\n",
        "\n",
        "def assign_segment(volatility):\n",
        "    if volatility <= low_vol_threshold:\n",
        "        return 'Baja Volatilidad'\n",
        "    elif volatility <= high_vol_threshold:\n",
        "        return 'Media Volatilidad'\n",
        "    else:\n",
        "        return 'Alta Volatilidad'\n",
        "\n",
        "volatility_analysis['segment'] = volatility_analysis['volatility'].apply(assign_segment)\n",
        "\n",
        "# 2. An√°lisis de Rendimiento\n",
        "df_completo_sorted = df_completo.sort_values(by=['company', 'date'])\n",
        "primer_precio = df_completo_sorted.groupby('company')['adj_close'].first()\n",
        "ultimo_precio = df_completo_sorted.groupby('company')['adj_close'].last()\n",
        "rendimiento_total = ((ultimo_precio - primer_precio) / primer_precio) * 100\n",
        "df_rendimiento = rendimiento_total.reset_index()\n",
        "df_rendimiento.rename(columns={'adj_close': 'rendimiento_total_%'}, inplace=True)\n",
        "\n",
        "# 3. An√°lisis de Nivel de Precio\n",
        "precio_promedio = df_completo.groupby('company')['adj_close'].mean().reset_index()\n",
        "precio_promedio.rename(columns={'adj_close': 'precio_promedio'}, inplace=True)\n",
        "\n",
        "# --- CREACI√ìN DEL GR√ÅFICO INTERACTIVO (VERSI√ìN MEJORADA) ---\n",
        "\n",
        "dropdown = widgets.Dropdown(\n",
        "    options=['Volatilidad', 'Rendimiento', 'Nivel de Precio'],\n",
        "    value='Volatilidad',\n",
        "    description='Seleccionar An√°lisis:'\n",
        ")\n",
        "\n",
        "def plot_graph(analysis_type):\n",
        "    plt.figure(figsize=(12, 8))\n",
        "\n",
        "    if analysis_type == 'Volatilidad':\n",
        "        # *** CAMBIOS AQU√ç: Se a√±ade 'hue' y 'palette' ***\n",
        "        sns.barplot(\n",
        "            x='volatility',\n",
        "            y='company',\n",
        "            hue='segment',  # Usa la columna 'segment' para dar color\n",
        "            data=volatility_analysis.sort_values('volatility', ascending=False),\n",
        "            dodge=False,\n",
        "            palette={'Baja Volatilidad': 'green', 'Media Volatilidad': 'orange', 'Alta Volatilidad': 'red'} # Define los colores\n",
        "        )\n",
        "        plt.title('Comparaci√≥n de Volatilidad por Empresa')\n",
        "        plt.xlabel('Desviaci√≥n Est√°ndar del Retorno Diario')\n",
        "\n",
        "    elif analysis_type == 'Rendimiento':\n",
        "        sns.barplot(x='rendimiento_total_%', y='company', data=df_rendimiento.sort_values('rendimiento_total_%', ascending=False))\n",
        "        plt.title('Comparaci√≥n de Rendimiento Total por Empresa')\n",
        "        plt.xlabel('Rendimiento Total (%)')\n",
        "\n",
        "    elif analysis_type == 'Nivel de Precio':\n",
        "        sns.barplot(x='precio_promedio', y='company', data=precio_promedio.sort_values('precio_promedio', ascending=False))\n",
        "        plt.title('Comparaci√≥n de Nivel de Precio Promedio')\n",
        "        plt.xlabel('Precio Promedio de Cierre Ajustado (USD)')\n",
        "\n",
        "    plt.ylabel('Empresa')\n",
        "    plt.show()\n",
        "\n",
        "interactive_plot = interactive(plot_graph, analysis_type=dropdown)\n",
        "display(interactive_plot)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 660,
          "referenced_widgets": [
            "20984286b00749609c69982dddf00ffc",
            "693b3e21a908494b83d1f85ba9f9a612",
            "2cce0df18ec64c90b305ad55489a93ad",
            "5e7d1d147655410fa8c4ab8b0c698505",
            "3cd83e27ab7448e2b7d4f82a2fd6cbc8",
            "86ecb1222c1748c7b0cc9b3d9802ce3e",
            "5f23c186e42a4b59804cb600bdbbed8c"
          ]
        },
        "cellView": "form",
        "id": "X09l-3Xw9cla",
        "outputId": "fcb86c88-e1a5-4f99-c809-8922e9727cb3"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "interactive(children=(Dropdown(description='Seleccionar An√°lisis:', options=('Volatilidad', 'Rendimiento', 'Ni‚Ä¶"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "20984286b00749609c69982dddf00ffc"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Es importante detallar que durante los a√±os del 2020 al 2023 se dieron tres situaciones significativas a nivel global que impactaron en el mercado burs√°til.\n",
        "\n",
        "üìä Qu√© pas√≥ con las Big Tech (2020‚Äì2023)\n",
        "\n",
        "üîπ **2020‚Äì2021: Boom tecnol√≥gico**\n",
        "\n",
        "Tasas de inter√©s muy bajas + est√≠mulos econ√≥micos.\n",
        "\n",
        "La pandemia aceler√≥ el teletrabajo, el e-commerce y la digitalizaci√≥n.\n",
        "\n",
        "Apple, Amazon, Microsoft, Tesla, Google y Nvidia alcanzaron m√°ximos hist√≥ricos.\n",
        "\n",
        "üîπ **2022: Ca√≠da y ajuste**\n",
        "\n",
        "La inflaci√≥n disparada oblig√≥ a subir las tasas de inter√©s.\n",
        "\n",
        "Se fren√≥ el consumo y llegaron los despidos masivos en tech.\n",
        "\n",
        "El Nasdaq cay√≥ m√°s del 30 %.\n",
        "\n",
        "üîπ **2023: Renacimiento por la IA**\n",
        "\n",
        "La irrupci√≥n de ChatGPT y la inteligencia artificial generativa reactiv√≥ la confianza.\n",
        "\n",
        "Nvidia, Microsoft y Alphabet lideraron la recuperaci√≥n.\n",
        "\n",
        "Las ‚ÄúMagnificent Seven‚Äù impulsaron la mayor parte del crecimiento del S&P 500.\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## 4. Conclusiones\n",
        "\n",
        "Los datos muestran que existe una diferencia significativa en la estabilidad de precios entre las diferentes empresas tecnol√≥gicas. Compa√±√≠as m√°s consolidadas como IBM y Oracle tienden a tener una menor fluctuaci√≥n diaria en comparaci√≥n con otras. La segmentaci√≥n nos permite identificar claramente un grupo de acciones que se ajustan al perfil de un inversor que busca bajo riesgo.\n",
        "\n",
        "---\n",
        "\n",
        "## 5. Recomendaci√≥n\n",
        "\n",
        "Para un nuevo inversor con aversi√≥n al riesgo, se recomienda considerar invertir en las empresas del segmento de **\"Baja Variaci√≥n\"**. Estas compa√±√≠as han demostrado tener la menor volatilidad en sus precios diarios. Las principales empresas recomendadas son:\n",
        "\n",
        "* **International Business Machines Corporation (IBM)**\n",
        "* **Oracle Corporation**\n",
        "* **Cisco Systems, Inc.**\n",
        "* **Intel Corporation**\n",
        "\n",
        "Estas acciones representan la opci√≥n m√°s estable y predecible dentro del grupo analizado.\n",
        "\n",
        "Por otro lado, si el inversor est√° dispuesto a aceptar un poco m√°s de riesgo a cambio de un mayor potencial de crecimiento, las siguientes empresas son excelentes candidatas. Aunque su volatilidad es moderada, su rendimiento hist√≥rico ha sido sustancialmente mayor que el de las empresas m√°s estables.\n",
        "\n",
        "Empresas Recomendadas en esta categor√≠a:\n",
        "\n",
        "* **Microsoft Corporation**\n",
        "* **Apple Inc.**\n",
        "\n",
        "Estas empresas representan un balance entre estabilidad y un historial de fuerte crecimiento en el valor de sus acciones. Se ubican en el segmento de \"Media Variaci√≥n\", lo que las hace ligeramente m√°s riesgosas que IBM u Oracle, pero con un potencial de recompensa considerablemente mayor.\n",
        "\n",
        "## 6. Recomendaci√≥n a nivel de Anal√≠ticas\n",
        "\n",
        "Para profundizar el an√°lisis y obtener una visi√≥n m√°s completa del comportamiento de las acciones, se recomiendan las siguientes acciones:\n",
        "\n",
        "* **Enriquecer los Datos:** Integrar datos externos, como el √≠ndice de mercado S&P 500, para comparar la volatilidad de cada acci√≥n con el mercado en general y calcular m√©tricas clave como el \"Beta\".\n",
        "\n",
        "* **An√°lisis Temporal:** Analizar la volatilidad por per√≠odos de tiempo espec√≠ficos (por ejemplo, a√±o a a√±o o post-pandemia) para identificar si la estabilidad de una empresa ha mejorado o empeorado recientemente.\n",
        "\n",
        "* **M√©tricas Avanzadas:** Calcular el Sharpe Ratio para cada acci√≥n. Esta m√©trica permitir√≠a evaluar qu√© empresas ofrecen el mejor rendimiento ajustado por su nivel de riesgo, proporcionando una recomendaci√≥n m√°s sofisticada."
      ],
      "metadata": {
        "id": "j6jCSFkJ_sEu"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "S0jW648lIon9"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}